
Mihnea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000045e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f58  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abd  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000807  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000026c  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055d  00000000  00000000  00002acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000530  00000000  00000000  00003029  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_20>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e5       	ldi	r30, 0x5E	; 94
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <main>
  a2:	0c 94 2d 02 	jmp	0x45a	; 0x45a <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <LCD_read>:
{
    /* TODO task 1 LCD */

    LCD_writeInstr(LCD_INSTR_DDRAM + addr);
    LCD_putChar(c);
}
  aa:	7f 92       	push	r7
  ac:	8f 92       	push	r8
  ae:	9f 92       	push	r9
  b0:	af 92       	push	r10
  b2:	bf 92       	push	r11
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	27 b1       	in	r18, 0x07	; 7
  c6:	27 78       	andi	r18, 0x87	; 135
  c8:	27 b9       	out	0x07, r18	; 7
  ca:	28 b1       	in	r18, 0x08	; 8
  cc:	27 78       	andi	r18, 0x87	; 135
  ce:	28 b9       	out	0x08, r18	; 8
  d0:	17 9a       	sbi	0x02, 7	; 2
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_read+0x2a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_read+0x2c>
  d6:	26 b1       	in	r18, 0x06	; 6
  d8:	b6 b1       	in	r27, 0x06	; 6
  da:	a6 b1       	in	r26, 0x06	; 6
  dc:	76 b0       	in	r7, 0x06	; 6
  de:	17 98       	cbi	0x02, 7	; 2
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_read+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_read+0x3a>
  e4:	17 9a       	sbi	0x02, 7	; 2
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_read+0x3e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_read+0x40>
  ea:	86 b0       	in	r8, 0x06	; 6
  ec:	96 b0       	in	r9, 0x06	; 6
  ee:	b6 b0       	in	r11, 0x06	; 6
  f0:	a6 b0       	in	r10, 0x06	; 6
  f2:	17 98       	cbi	0x02, 7	; 2
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_read+0x4c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_read+0x4e>
  f8:	37 b1       	in	r19, 0x07	; 7
  fa:	38 67       	ori	r19, 0x78	; 120
  fc:	37 b9       	out	0x07, r19	; 7
  fe:	26 95       	lsr	r18
 100:	26 95       	lsr	r18
 102:	26 95       	lsr	r18
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	28 9f       	mul	r18, r24
 108:	e0 01       	movw	r28, r0
 10a:	11 24       	eor	r1, r1
 10c:	9e 01       	movw	r18, r28
 10e:	33 27       	eor	r19, r19
 110:	b4 fb       	bst	r27, 4
 112:	88 27       	eor	r24, r24
 114:	80 f9       	bld	r24, 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	00 24       	eor	r0, r0
 11a:	96 95       	lsr	r25
 11c:	87 95       	ror	r24
 11e:	07 94       	ror	r0
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	07 94       	ror	r0
 126:	98 2f       	mov	r25, r24
 128:	80 2d       	mov	r24, r0
 12a:	82 2b       	or	r24, r18
 12c:	93 2b       	or	r25, r19
 12e:	a5 fb       	bst	r26, 5
 130:	ee 24       	eor	r14, r14
 132:	e0 f8       	bld	r14, 0
 134:	f1 2c       	mov	r15, r1
 136:	d7 01       	movw	r26, r14
 138:	aa 0f       	add	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	a2 95       	swap	r26
 13e:	b2 95       	swap	r27
 140:	b0 7f       	andi	r27, 0xF0	; 240
 142:	ba 27       	eor	r27, r26
 144:	a0 7f       	andi	r26, 0xF0	; 240
 146:	ba 27       	eor	r27, r26
 148:	a8 2b       	or	r26, r24
 14a:	b9 2b       	or	r27, r25
 14c:	76 fa       	bst	r7, 6
 14e:	00 27       	eor	r16, r16
 150:	00 f9       	bld	r16, 0
 152:	10 e0       	ldi	r17, 0x00	; 0
 154:	c8 01       	movw	r24, r16
 156:	82 95       	swap	r24
 158:	92 95       	swap	r25
 15a:	90 7f       	andi	r25, 0xF0	; 240
 15c:	98 27       	eor	r25, r24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	98 27       	eor	r25, r24
 162:	8a 2b       	or	r24, r26
 164:	9b 2b       	or	r25, r27
 166:	83 fa       	bst	r8, 3
 168:	cc 24       	eor	r12, r12
 16a:	c0 f8       	bld	r12, 0
 16c:	d1 2c       	mov	r13, r1
 16e:	96 01       	movw	r18, r12
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	94 fa       	bst	r9, 4
 17e:	ee 27       	eor	r30, r30
 180:	e0 f9       	bld	r30, 0
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	2e 2b       	or	r18, r30
 18e:	3f 2b       	or	r19, r31
 190:	a6 fa       	bst	r10, 6
 192:	44 27       	eor	r20, r20
 194:	40 f9       	bld	r20, 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	42 2b       	or	r20, r18
 19a:	53 2b       	or	r21, r19
 19c:	b5 fa       	bst	r11, 5
 19e:	66 27       	eor	r22, r22
 1a0:	60 f9       	bld	r22, 0
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	46 2b       	or	r20, r22
 1aa:	57 2b       	or	r21, r23
 1ac:	84 2b       	or	r24, r20
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	bf 90       	pop	r11
 1c0:	af 90       	pop	r10
 1c2:	9f 90       	pop	r9
 1c4:	8f 90       	pop	r8
 1c6:	7f 90       	pop	r7
 1c8:	08 95       	ret

000001ca <LCD_readStatus>:
 1ca:	15 98       	cbi	0x02, 5	; 2
 1cc:	16 9a       	sbi	0x02, 6	; 2
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_readStatus+0x6>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCD_readStatus+0x8>
 1d2:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_read>
 1d6:	08 95       	ret

000001d8 <LCD_isBusy>:
 1d8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_readStatus>
 1dc:	88 1f       	adc	r24, r24
 1de:	88 27       	eor	r24, r24
 1e0:	88 1f       	adc	r24, r24
 1e2:	08 95       	ret

000001e4 <LCD_waitNotBusy>:
 1e4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_isBusy>
 1e8:	81 11       	cpse	r24, r1
 1ea:	fc cf       	rjmp	.-8      	; 0x1e4 <LCD_waitNotBusy>
 1ec:	08 95       	ret

000001ee <LCD_write>:
 1ee:	cf 93       	push	r28
 1f0:	17 9a       	sbi	0x02, 7	; 2
 1f2:	98 b1       	in	r25, 0x08	; 8
 1f4:	c8 2f       	mov	r28, r24
 1f6:	cc 1f       	adc	r28, r28
 1f8:	cc 27       	eor	r28, r28
 1fa:	cc 1f       	adc	r28, r28
 1fc:	cc 0f       	add	r28, r28
 1fe:	cc 0f       	add	r28, r28
 200:	cc 0f       	add	r28, r28
 202:	97 78       	andi	r25, 0x87	; 135
 204:	9c 2b       	or	r25, r28
 206:	86 fb       	bst	r24, 6
 208:	44 27       	eor	r20, r20
 20a:	40 f9       	bld	r20, 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	42 95       	swap	r20
 210:	52 95       	swap	r21
 212:	50 7f       	andi	r21, 0xF0	; 240
 214:	54 27       	eor	r21, r20
 216:	40 7f       	andi	r20, 0xF0	; 240
 218:	54 27       	eor	r21, r20
 21a:	49 2b       	or	r20, r25
 21c:	98 2f       	mov	r25, r24
 21e:	90 72       	andi	r25, 0x20	; 32
 220:	49 2b       	or	r20, r25
 222:	84 fb       	bst	r24, 4
 224:	aa 27       	eor	r26, r26
 226:	a0 f9       	bld	r26, 0
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	00 24       	eor	r0, r0
 22c:	b6 95       	lsr	r27
 22e:	a7 95       	ror	r26
 230:	07 94       	ror	r0
 232:	b6 95       	lsr	r27
 234:	a7 95       	ror	r26
 236:	07 94       	ror	r0
 238:	ba 2f       	mov	r27, r26
 23a:	a0 2d       	mov	r26, r0
 23c:	a4 2b       	or	r26, r20
 23e:	a8 b9       	out	0x08, r26	; 8
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_write+0x54>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_write+0x56>
 244:	17 98       	cbi	0x02, 7	; 2
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_write+0x5a>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_write+0x5c>
 24a:	17 9a       	sbi	0x02, 7	; 2
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	28 2f       	mov	r18, r24
 250:	21 70       	andi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	00 24       	eor	r0, r0
 256:	36 95       	lsr	r19
 258:	27 95       	ror	r18
 25a:	07 94       	ror	r0
 25c:	36 95       	lsr	r19
 25e:	27 95       	ror	r18
 260:	07 94       	ror	r0
 262:	32 2f       	mov	r19, r18
 264:	20 2d       	mov	r18, r0
 266:	97 78       	andi	r25, 0x87	; 135
 268:	29 2b       	or	r18, r25
 26a:	98 2f       	mov	r25, r24
 26c:	98 70       	andi	r25, 0x08	; 8
 26e:	29 2b       	or	r18, r25
 270:	82 fb       	bst	r24, 2
 272:	ee 27       	eor	r30, r30
 274:	e0 f9       	bld	r30, 0
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	e2 95       	swap	r30
 27a:	f2 95       	swap	r31
 27c:	f0 7f       	andi	r31, 0xF0	; 240
 27e:	fe 27       	eor	r31, r30
 280:	e0 7f       	andi	r30, 0xF0	; 240
 282:	fe 27       	eor	r31, r30
 284:	e2 2b       	or	r30, r18
 286:	81 fb       	bst	r24, 1
 288:	66 27       	eor	r22, r22
 28a:	60 f9       	bld	r22, 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	62 95       	swap	r22
 294:	72 95       	swap	r23
 296:	70 7f       	andi	r23, 0xF0	; 240
 298:	76 27       	eor	r23, r22
 29a:	60 7f       	andi	r22, 0xF0	; 240
 29c:	76 27       	eor	r23, r22
 29e:	6e 2b       	or	r22, r30
 2a0:	68 b9       	out	0x08, r22	; 8
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_write+0xb6>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_write+0xb8>
 2a6:	17 98       	cbi	0x02, 7	; 2
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_write+0xbc>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_write+0xbe>
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <LCD_writeInstr>:
 2b0:	cf 93       	push	r28
 2b2:	c8 2f       	mov	r28, r24
 2b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_waitNotBusy>
 2b8:	15 98       	cbi	0x02, 5	; 2
 2ba:	16 98       	cbi	0x02, 6	; 2
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_writeInstr+0xe>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_writeInstr+0x10>
 2c0:	8c 2f       	mov	r24, r28
 2c2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_write>
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_init>:
 2ca:	87 b1       	in	r24, 0x07	; 7
 2cc:	88 67       	ori	r24, 0x78	; 120
 2ce:	87 b9       	out	0x07, r24	; 7
 2d0:	81 b1       	in	r24, 0x01	; 1
 2d2:	80 6e       	ori	r24, 0xE0	; 224
 2d4:	81 b9       	out	0x01, r24	; 1
 2d6:	15 98       	cbi	0x02, 5	; 2
 2d8:	16 98       	cbi	0x02, 6	; 2
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_init+0x12>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_init+0x14>
 2de:	17 9a       	sbi	0x02, 7	; 2
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	87 78       	andi	r24, 0x87	; 135
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_init+0x20>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_init+0x22>
 2ec:	17 98       	cbi	0x02, 7	; 2
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_init+0x26>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_init+0x28>
 2f2:	88 e2       	ldi	r24, 0x28	; 40
 2f4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
 30a:	08 95       	ret

0000030c <LCD_writeData>:
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
 310:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_waitNotBusy>
 314:	15 9a       	sbi	0x02, 5	; 2
 316:	16 98       	cbi	0x02, 6	; 2
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_writeData+0xe>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_writeData+0x10>
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_write>
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <LCD_print>:

// Afiseaza string-ul pe LCD incepand de la adresa curenta.
void LCD_print(const char* msg)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ec 01       	movw	r28, r24
    while(*msg)
 32c:	88 81       	ld	r24, Y
 32e:	88 23       	and	r24, r24
 330:	31 f0       	breq	.+12     	; 0x33e <LCD_print+0x18>
 332:	21 96       	adiw	r28, 0x01	; 1
}

// Afiseaza caracterul pe LCD la adresa curenta.
void LCD_putChar(char c)
{
    LCD_writeData(c);
 334:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_writeData>
}

// Afiseaza string-ul pe LCD incepand de la adresa curenta.
void LCD_print(const char* msg)
{
    while(*msg)
 338:	89 91       	ld	r24, Y+
 33a:	81 11       	cpse	r24, r1
 33c:	fb cf       	rjmp	.-10     	; 0x334 <LCD_print+0xe>
        LCD_putChar(*msg++);
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <LCD_printAt>:

// Afiseaza string-ul pe LCD incepand de la adresa primita.
void LCD_printAt(uint8_t addr, const char* msg)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	eb 01       	movw	r28, r22
    /* TODO task 1 LCD */

    LCD_writeInstr(LCD_INSTR_DDRAM | addr);
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
    LCD_print(msg);
 350:	ce 01       	movw	r24, r28
 352:	0e 94 93 01 	call	0x326	; 0x326 <LCD_print>
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <__vector_20>:
}

static int value = 0;
static char vect[2] = "0";

ISR(USART0_RX_vect) {
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	value = UDR0;
 37e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	vect[0] += 1;
 382:	e0 e0       	ldi	r30, 0x00	; 0
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	80 81       	ld	r24, Z
 388:	8f 5f       	subi	r24, 0xFF	; 255
 38a:	80 83       	st	Z, r24
	LCD_printAt(0, vect);
 38c:	bf 01       	movw	r22, r30
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_printAt>
	
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <main>:

int main(void)
{
	/* activeaza intreruperi globale */
	sei();
 3b6:	78 94       	sei
	
	LCD_init();
 3b8:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_init>
	LCD_printAt(64, "Mihnea");
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	71 e0       	ldi	r23, 0x01	; 1
 3c0:	80 e4       	ldi	r24, 0x40	; 64
 3c2:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_printAt>
    
	/* activare USER led */
	DDRD |= (1 << PD7);
 3c6:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1 << PD7);
 3c8:	5f 9a       	sbi	0x0b, 7	; 11
	
	/* activare backlight LED */
	DDRC |= (1 << PC2);
 3ca:	3a 9a       	sbi	0x07, 2	; 7
	PORTC |= (1 << PC2);
 3cc:	42 9a       	sbi	0x08, 2	; 8
	
	USART0_init();
 3ce:	0e 94 02 02 	call	0x404	; 0x404 <USART0_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	83 ed       	ldi	r24, 0xD3	; 211
 3d6:	90 e3       	ldi	r25, 0x30	; 48
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x22>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x2c>
 3e2:	00 00       	nop
	_delay_ms(1000);

    while(1) {
	    /* Invers?m starea pinului. */
	    PORTD ^= (1 << PD7);
 3e4:	8b b1       	in	r24, 0x0b	; 11
 3e6:	80 58       	subi	r24, 0x80	; 128
 3e8:	8b b9       	out	0x0b, r24	; 11
		
		USART0_transmit('x');
 3ea:	88 e7       	ldi	r24, 0x78	; 120
 3ec:	0e 94 25 02 	call	0x44a	; 0x44a <USART0_transmit>
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	87 ea       	ldi	r24, 0xA7	; 167
 3f4:	91 e6       	ldi	r25, 0x61	; 97
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x40>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
 402:	f0 cf       	rjmp	.-32     	; 0x3e4 <main+0x2e>

00000404 <USART0_init>:
/*
 * Functie de initializare a controllerului USART
 */
void USART0_init()
{
	UCSR0A = 0x00;
 404:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	/* activeaza intreruperea la RXC0 */
	UCSR0B |= (1<<RXCIE0);
 408:	a1 ec       	ldi	r26, 0xC1	; 193
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	8c 91       	ld	r24, X
 40e:	80 68       	ori	r24, 0x80	; 128
 410:	8c 93       	st	X, r24
	
    /* seteaza baud rate la 115.2K */
    UBRR0H = 0;
 412:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = 8;
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    
	/* selecteaza mod asincron */
	UCSR0C &= ~(1<<UMSEL00);
 41c:	e2 ec       	ldi	r30, 0xC2	; 194
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	8f 7b       	andi	r24, 0xBF	; 191
 424:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<UMSEL01);
 426:	80 81       	ld	r24, Z
 428:	8f 77       	andi	r24, 0x7F	; 127
 42a:	80 83       	st	Z, r24

    /* seteaza formatul frame-ului: 8 biti de date */
	UCSR0C |= (2<<UCSZ00);
 42c:	80 81       	ld	r24, Z
 42e:	84 60       	ori	r24, 0x04	; 4
 430:	80 83       	st	Z, r24
	
	/* 1 bit de stop */
    UCSR0C &= ~(1<<USBS0);
 432:	80 81       	ld	r24, Z
 434:	87 7f       	andi	r24, 0xF7	; 247
 436:	80 83       	st	Z, r24
    
	/* fara paritate */
	UCSR0C &= ~(1<<UPM00);
 438:	80 81       	ld	r24, Z
 43a:	8f 7e       	andi	r24, 0xEF	; 239
 43c:	80 83       	st	Z, r24
    UCSR0C &= ~(1<<UPM01);
 43e:	80 81       	ld	r24, Z
 440:	8f 7d       	andi	r24, 0xDF	; 223
 442:	80 83       	st	Z, r24
	
	/* porneste transmitatorul si receptorul */
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 444:	88 e1       	ldi	r24, 0x18	; 24
 446:	8c 93       	st	X, r24
 448:	08 95       	ret

0000044a <USART0_transmit>:
 * @param data - caracterul de transmis
 */
void USART0_transmit(char data)
{
    /* asteapta pana bufferul e gol */
    while(!(UCSR0A & (1<<UDRE0)));
 44a:	e0 ec       	ldi	r30, 0xC0	; 192
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	90 81       	ld	r25, Z
 450:	95 ff       	sbrs	r25, 5
 452:	fd cf       	rjmp	.-6      	; 0x44e <USART0_transmit+0x4>

    /* pune datele in buffer; transmisia va porni automat in urma scrierii */
    UDR0 = data;
 454:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 458:	08 95       	ret

0000045a <_exit>:
 45a:	f8 94       	cli

0000045c <__stop_program>:
 45c:	ff cf       	rjmp	.-2      	; 0x45c <__stop_program>
