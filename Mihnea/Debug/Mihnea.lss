
Mihnea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00000d80  00000df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d80  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000130b  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b16  00000000  00000000  0000238b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ba  00000000  00000000  00002ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000034c  00000000  00000000  0000385c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000591  00000000  00000000  00003ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000910  00000000  00000000  00004139  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00004a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_5>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e8       	ldi	r30, 0x80	; 128
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 3d       	cpi	r26, 0xD8	; 216
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
  a2:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <LCD_read>:
{
    /* TODO task 1 LCD */

    LCD_writeInstr(LCD_INSTR_DDRAM + addr);
    LCD_putChar(c);
}
  aa:	7f 92       	push	r7
  ac:	8f 92       	push	r8
  ae:	9f 92       	push	r9
  b0:	af 92       	push	r10
  b2:	bf 92       	push	r11
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	27 b1       	in	r18, 0x07	; 7
  c6:	27 78       	andi	r18, 0x87	; 135
  c8:	27 b9       	out	0x07, r18	; 7
  ca:	28 b1       	in	r18, 0x08	; 8
  cc:	27 78       	andi	r18, 0x87	; 135
  ce:	28 b9       	out	0x08, r18	; 8
  d0:	17 9a       	sbi	0x02, 7	; 2
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_read+0x2a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_read+0x2c>
  d6:	26 b1       	in	r18, 0x06	; 6
  d8:	b6 b1       	in	r27, 0x06	; 6
  da:	a6 b1       	in	r26, 0x06	; 6
  dc:	76 b0       	in	r7, 0x06	; 6
  de:	17 98       	cbi	0x02, 7	; 2
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_read+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_read+0x3a>
  e4:	17 9a       	sbi	0x02, 7	; 2
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_read+0x3e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_read+0x40>
  ea:	86 b0       	in	r8, 0x06	; 6
  ec:	96 b0       	in	r9, 0x06	; 6
  ee:	b6 b0       	in	r11, 0x06	; 6
  f0:	a6 b0       	in	r10, 0x06	; 6
  f2:	17 98       	cbi	0x02, 7	; 2
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_read+0x4c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_read+0x4e>
  f8:	37 b1       	in	r19, 0x07	; 7
  fa:	38 67       	ori	r19, 0x78	; 120
  fc:	37 b9       	out	0x07, r19	; 7
  fe:	26 95       	lsr	r18
 100:	26 95       	lsr	r18
 102:	26 95       	lsr	r18
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	28 9f       	mul	r18, r24
 108:	e0 01       	movw	r28, r0
 10a:	11 24       	eor	r1, r1
 10c:	9e 01       	movw	r18, r28
 10e:	33 27       	eor	r19, r19
 110:	b4 fb       	bst	r27, 4
 112:	88 27       	eor	r24, r24
 114:	80 f9       	bld	r24, 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	00 24       	eor	r0, r0
 11a:	96 95       	lsr	r25
 11c:	87 95       	ror	r24
 11e:	07 94       	ror	r0
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	07 94       	ror	r0
 126:	98 2f       	mov	r25, r24
 128:	80 2d       	mov	r24, r0
 12a:	82 2b       	or	r24, r18
 12c:	93 2b       	or	r25, r19
 12e:	a5 fb       	bst	r26, 5
 130:	ee 24       	eor	r14, r14
 132:	e0 f8       	bld	r14, 0
 134:	f1 2c       	mov	r15, r1
 136:	d7 01       	movw	r26, r14
 138:	aa 0f       	add	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	a2 95       	swap	r26
 13e:	b2 95       	swap	r27
 140:	b0 7f       	andi	r27, 0xF0	; 240
 142:	ba 27       	eor	r27, r26
 144:	a0 7f       	andi	r26, 0xF0	; 240
 146:	ba 27       	eor	r27, r26
 148:	a8 2b       	or	r26, r24
 14a:	b9 2b       	or	r27, r25
 14c:	76 fa       	bst	r7, 6
 14e:	00 27       	eor	r16, r16
 150:	00 f9       	bld	r16, 0
 152:	10 e0       	ldi	r17, 0x00	; 0
 154:	c8 01       	movw	r24, r16
 156:	82 95       	swap	r24
 158:	92 95       	swap	r25
 15a:	90 7f       	andi	r25, 0xF0	; 240
 15c:	98 27       	eor	r25, r24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	98 27       	eor	r25, r24
 162:	8a 2b       	or	r24, r26
 164:	9b 2b       	or	r25, r27
 166:	83 fa       	bst	r8, 3
 168:	cc 24       	eor	r12, r12
 16a:	c0 f8       	bld	r12, 0
 16c:	d1 2c       	mov	r13, r1
 16e:	96 01       	movw	r18, r12
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	94 fa       	bst	r9, 4
 17e:	ee 27       	eor	r30, r30
 180:	e0 f9       	bld	r30, 0
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	2e 2b       	or	r18, r30
 18e:	3f 2b       	or	r19, r31
 190:	a6 fa       	bst	r10, 6
 192:	44 27       	eor	r20, r20
 194:	40 f9       	bld	r20, 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	42 2b       	or	r20, r18
 19a:	53 2b       	or	r21, r19
 19c:	b5 fa       	bst	r11, 5
 19e:	66 27       	eor	r22, r22
 1a0:	60 f9       	bld	r22, 0
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	46 2b       	or	r20, r22
 1aa:	57 2b       	or	r21, r23
 1ac:	84 2b       	or	r24, r20
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	bf 90       	pop	r11
 1c0:	af 90       	pop	r10
 1c2:	9f 90       	pop	r9
 1c4:	8f 90       	pop	r8
 1c6:	7f 90       	pop	r7
 1c8:	08 95       	ret

000001ca <LCD_readStatus>:
 1ca:	15 98       	cbi	0x02, 5	; 2
 1cc:	16 9a       	sbi	0x02, 6	; 2
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_readStatus+0x6>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCD_readStatus+0x8>
 1d2:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_read>
 1d6:	08 95       	ret

000001d8 <LCD_isBusy>:
 1d8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_readStatus>
 1dc:	88 1f       	adc	r24, r24
 1de:	88 27       	eor	r24, r24
 1e0:	88 1f       	adc	r24, r24
 1e2:	08 95       	ret

000001e4 <LCD_waitNotBusy>:
 1e4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_isBusy>
 1e8:	81 11       	cpse	r24, r1
 1ea:	fc cf       	rjmp	.-8      	; 0x1e4 <LCD_waitNotBusy>
 1ec:	08 95       	ret

000001ee <LCD_write>:
 1ee:	cf 93       	push	r28
 1f0:	17 9a       	sbi	0x02, 7	; 2
 1f2:	98 b1       	in	r25, 0x08	; 8
 1f4:	c8 2f       	mov	r28, r24
 1f6:	cc 1f       	adc	r28, r28
 1f8:	cc 27       	eor	r28, r28
 1fa:	cc 1f       	adc	r28, r28
 1fc:	cc 0f       	add	r28, r28
 1fe:	cc 0f       	add	r28, r28
 200:	cc 0f       	add	r28, r28
 202:	97 78       	andi	r25, 0x87	; 135
 204:	9c 2b       	or	r25, r28
 206:	86 fb       	bst	r24, 6
 208:	44 27       	eor	r20, r20
 20a:	40 f9       	bld	r20, 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	42 95       	swap	r20
 210:	52 95       	swap	r21
 212:	50 7f       	andi	r21, 0xF0	; 240
 214:	54 27       	eor	r21, r20
 216:	40 7f       	andi	r20, 0xF0	; 240
 218:	54 27       	eor	r21, r20
 21a:	49 2b       	or	r20, r25
 21c:	98 2f       	mov	r25, r24
 21e:	90 72       	andi	r25, 0x20	; 32
 220:	49 2b       	or	r20, r25
 222:	84 fb       	bst	r24, 4
 224:	aa 27       	eor	r26, r26
 226:	a0 f9       	bld	r26, 0
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	00 24       	eor	r0, r0
 22c:	b6 95       	lsr	r27
 22e:	a7 95       	ror	r26
 230:	07 94       	ror	r0
 232:	b6 95       	lsr	r27
 234:	a7 95       	ror	r26
 236:	07 94       	ror	r0
 238:	ba 2f       	mov	r27, r26
 23a:	a0 2d       	mov	r26, r0
 23c:	a4 2b       	or	r26, r20
 23e:	a8 b9       	out	0x08, r26	; 8
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_write+0x54>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_write+0x56>
 244:	17 98       	cbi	0x02, 7	; 2
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_write+0x5a>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_write+0x5c>
 24a:	17 9a       	sbi	0x02, 7	; 2
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	28 2f       	mov	r18, r24
 250:	21 70       	andi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	00 24       	eor	r0, r0
 256:	36 95       	lsr	r19
 258:	27 95       	ror	r18
 25a:	07 94       	ror	r0
 25c:	36 95       	lsr	r19
 25e:	27 95       	ror	r18
 260:	07 94       	ror	r0
 262:	32 2f       	mov	r19, r18
 264:	20 2d       	mov	r18, r0
 266:	97 78       	andi	r25, 0x87	; 135
 268:	29 2b       	or	r18, r25
 26a:	98 2f       	mov	r25, r24
 26c:	98 70       	andi	r25, 0x08	; 8
 26e:	29 2b       	or	r18, r25
 270:	82 fb       	bst	r24, 2
 272:	ee 27       	eor	r30, r30
 274:	e0 f9       	bld	r30, 0
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	e2 95       	swap	r30
 27a:	f2 95       	swap	r31
 27c:	f0 7f       	andi	r31, 0xF0	; 240
 27e:	fe 27       	eor	r31, r30
 280:	e0 7f       	andi	r30, 0xF0	; 240
 282:	fe 27       	eor	r31, r30
 284:	e2 2b       	or	r30, r18
 286:	81 fb       	bst	r24, 1
 288:	66 27       	eor	r22, r22
 28a:	60 f9       	bld	r22, 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	62 95       	swap	r22
 294:	72 95       	swap	r23
 296:	70 7f       	andi	r23, 0xF0	; 240
 298:	76 27       	eor	r23, r22
 29a:	60 7f       	andi	r22, 0xF0	; 240
 29c:	76 27       	eor	r23, r22
 29e:	6e 2b       	or	r22, r30
 2a0:	68 b9       	out	0x08, r22	; 8
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_write+0xb6>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_write+0xb8>
 2a6:	17 98       	cbi	0x02, 7	; 2
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_write+0xbc>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_write+0xbe>
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <LCD_writeInstr>:
 2b0:	cf 93       	push	r28
 2b2:	c8 2f       	mov	r28, r24
 2b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_waitNotBusy>
 2b8:	15 98       	cbi	0x02, 5	; 2
 2ba:	16 98       	cbi	0x02, 6	; 2
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_writeInstr+0xe>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_writeInstr+0x10>
 2c0:	8c 2f       	mov	r24, r28
 2c2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_write>
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_init>:
 2ca:	87 b1       	in	r24, 0x07	; 7
 2cc:	88 67       	ori	r24, 0x78	; 120
 2ce:	87 b9       	out	0x07, r24	; 7
 2d0:	81 b1       	in	r24, 0x01	; 1
 2d2:	80 6e       	ori	r24, 0xE0	; 224
 2d4:	81 b9       	out	0x01, r24	; 1
 2d6:	15 98       	cbi	0x02, 5	; 2
 2d8:	16 98       	cbi	0x02, 6	; 2
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_init+0x12>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_init+0x14>
 2de:	17 9a       	sbi	0x02, 7	; 2
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	87 78       	andi	r24, 0x87	; 135
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_init+0x20>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_init+0x22>
 2ec:	17 98       	cbi	0x02, 7	; 2
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_init+0x26>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_init+0x28>
 2f2:	88 e2       	ldi	r24, 0x28	; 40
 2f4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
 30a:	08 95       	ret

0000030c <LCD_writeData>:
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
 310:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_waitNotBusy>
 314:	15 9a       	sbi	0x02, 5	; 2
 316:	16 98       	cbi	0x02, 6	; 2
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_writeData+0xe>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_writeData+0x10>
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_write>
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <LCD_print>:

// Afiseaza string-ul pe LCD incepand de la adresa curenta.
void LCD_print(const char* msg)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ec 01       	movw	r28, r24
    while(*msg)
 32c:	88 81       	ld	r24, Y
 32e:	88 23       	and	r24, r24
 330:	31 f0       	breq	.+12     	; 0x33e <LCD_print+0x18>
 332:	21 96       	adiw	r28, 0x01	; 1
}

// Afiseaza caracterul pe LCD la adresa curenta.
void LCD_putChar(char c)
{
    LCD_writeData(c);
 334:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_writeData>
}

// Afiseaza string-ul pe LCD incepand de la adresa curenta.
void LCD_print(const char* msg)
{
    while(*msg)
 338:	89 91       	ld	r24, Y+
 33a:	81 11       	cpse	r24, r1
 33c:	fb cf       	rjmp	.-10     	; 0x334 <LCD_print+0xe>
        LCD_putChar(*msg++);
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <LCD_printAt>:

// Afiseaza string-ul pe LCD incepand de la adresa primita.
void LCD_printAt(uint8_t addr, const char* msg)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	eb 01       	movw	r28, r22
    /* TODO task 1 LCD */

    LCD_writeInstr(LCD_INSTR_DDRAM | addr);
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_writeInstr>
    LCD_print(msg);
 350:	ce 01       	movw	r24, r28
 352:	0e 94 93 01 	call	0x326	; 0x326 <LCD_print>
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <shift_left>:

void shift_left(char *v, int first, int last)
{
	int i;
	
	for (i = 0; i < last - 1; i++) {
 35c:	9a 01       	movw	r18, r20
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	31 09       	sbc	r19, r1
 362:	12 16       	cp	r1, r18
 364:	13 06       	cpc	r1, r19
 366:	4c f4       	brge	.+18     	; 0x37a <shift_left+0x1e>
 368:	fc 01       	movw	r30, r24
 36a:	a9 01       	movw	r20, r18
 36c:	48 0f       	add	r20, r24
 36e:	59 1f       	adc	r21, r25
		v[i] = v[i + 1];
 370:	91 81       	ldd	r25, Z+1	; 0x01
 372:	91 93       	st	Z+, r25

void shift_left(char *v, int first, int last)
{
	int i;
	
	for (i = 0; i < last - 1; i++) {
 374:	e4 17       	cp	r30, r20
 376:	f5 07       	cpc	r31, r21
 378:	d9 f7       	brne	.-10     	; 0x370 <shift_left+0x14>
 37a:	08 95       	ret

0000037c <read_until_ok>:
	}
}

/* folosit pana la orice citire de OK\r\n */
int read_until_ok()
{
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <read_until_ok+0xa>
 386:	00 d0       	rcall	.+0      	; 0x388 <read_until_ok+0xc>
 388:	1f 92       	push	r1
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
	char v[5] = "";
 38e:	1a 82       	std	Y+2, r1	; 0x02
 390:	19 82       	std	Y+1, r1	; 0x01
 392:	fe 01       	movw	r30, r28
 394:	33 96       	adiw	r30, 0x03	; 3
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	df 01       	movw	r26, r30
 39a:	1d 92       	st	X+, r1
 39c:	8a 95       	dec	r24
 39e:	e9 f7       	brne	.-6      	; 0x39a <read_until_ok+0x1e>
	int cnt = 0;
 3a0:	00 e0       	ldi	r16, 0x00	; 0
 3a2:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1) {
		v[3] = USART0_receive();
 3a4:	0e 94 b4 03 	call	0x768	; 0x768 <USART0_receive>
 3a8:	8c 83       	std	Y+4, r24	; 0x04
		cnt++;
 3aa:	0f 5f       	subi	r16, 0xFF	; 255
 3ac:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if (strcmp(v, "OK\r\n") == 0)
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	71 e0       	ldi	r23, 0x01	; 1
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 cb 03 	call	0x796	; 0x796 <strcmp>
 3ba:	89 2b       	or	r24, r25
 3bc:	49 f0       	breq	.+18     	; 0x3d0 <read_until_ok+0x54>
			return cnt;
		
		shift_left(v, 0, 4);
 3be:	44 e0       	ldi	r20, 0x04	; 4
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	ce 01       	movw	r24, r28
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	0e 94 ae 01 	call	0x35c	; 0x35c <shift_left>
	}
 3ce:	ea cf       	rjmp	.-44     	; 0x3a4 <read_until_ok+0x28>
	
	return 0;
}
 3d0:	c8 01       	movw	r24, r16
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	08 95       	ret

000003e6 <generic_read_until>:


int generic_read_until(const char *word)
{
 3e6:	af 92       	push	r10
 3e8:	bf 92       	push	r11
 3ea:	cf 92       	push	r12
 3ec:	df 92       	push	r13
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	60 97       	sbiw	r28, 0x10	; 16
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	6c 01       	movw	r12, r24
	char v[16] = "";
 40c:	1a 82       	std	Y+2, r1	; 0x02
 40e:	19 82       	std	Y+1, r1	; 0x01
 410:	fe 01       	movw	r30, r28
 412:	33 96       	adiw	r30, 0x03	; 3
 414:	8e e0       	ldi	r24, 0x0E	; 14
 416:	df 01       	movw	r26, r30
 418:	1d 92       	st	X+, r1
 41a:	8a 95       	dec	r24
 41c:	e9 f7       	brne	.-6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	int cnt = 0;
	unsigned int world_len = strlen(word);
 41e:	f6 01       	movw	r30, r12
 420:	01 90       	ld	r0, Z+
 422:	00 20       	and	r0, r0
 424:	e9 f7       	brne	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	7f 01       	movw	r14, r30
 42a:	ec 18       	sub	r14, r12
 42c:	fd 08       	sbc	r15, r13
	
	v[15] = '\0';
 42e:	18 8a       	std	Y+16, r1	; 0x10
	
	if (world_len >= 16) {
 430:	b0 e1       	ldi	r27, 0x10	; 16
 432:	eb 16       	cp	r14, r27
 434:	f1 04       	cpc	r15, r1
 436:	50 f0       	brcs	.+20     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		LCD_printAt(0, "NASOL!");
 438:	65 e0       	ldi	r22, 0x05	; 5
 43a:	71 e0       	ldi	r23, 0x01	; 1
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_printAt>
		LCD_printAt(64, "NASOL!");
 442:	65 e0       	ldi	r22, 0x05	; 5
 444:	71 e0       	ldi	r23, 0x01	; 1
 446:	80 e4       	ldi	r24, 0x40	; 64
 448:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_printAt>
	return 0;
}


int generic_read_until(const char *word)
{
 44c:	00 e0       	ldi	r16, 0x00	; 0
 44e:	10 e0       	ldi	r17, 0x00	; 0
		LCD_printAt(0, "NASOL!");
		LCD_printAt(64, "NASOL!");
	}
	
	while (1) {
		v[world_len - 1] = USART0_receive();
 450:	5e 01       	movw	r10, r28
 452:	ae 0c       	add	r10, r14
 454:	bf 1c       	adc	r11, r15
 456:	0e 94 b4 03 	call	0x768	; 0x768 <USART0_receive>
 45a:	f5 01       	movw	r30, r10
 45c:	80 83       	st	Z, r24
		cnt++;
 45e:	0f 5f       	subi	r16, 0xFF	; 255
 460:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if (strcmp(v, word) == 0)
 462:	b6 01       	movw	r22, r12
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	0e 94 cb 03 	call	0x796	; 0x796 <strcmp>
 46c:	89 2b       	or	r24, r25
 46e:	41 f0       	breq	.+16     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			return cnt;
		
		shift_left(v, 0, world_len);
 470:	a7 01       	movw	r20, r14
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	ce 01       	movw	r24, r28
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	0e 94 ae 01 	call	0x35c	; 0x35c <shift_left>
	}
 47e:	eb cf       	rjmp	.-42     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	
	return 0;
}
 480:	c8 01       	movw	r24, r16
 482:	60 96       	adiw	r28, 0x10	; 16
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	08 95       	ret

000004a4 <read_until_2crlf>:
/*
 * folosit pana la citirea \r\n\r\n, pentru citirea completa a
 * requesturilor http GET
 */
int read_until_2crlf()
{
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <read_until_2crlf+0xa>
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <read_until_2crlf+0xc>
 4b0:	1f 92       	push	r1
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
	char v[5] = "";
 4b6:	1a 82       	std	Y+2, r1	; 0x02
 4b8:	19 82       	std	Y+1, r1	; 0x01
 4ba:	fe 01       	movw	r30, r28
 4bc:	33 96       	adiw	r30, 0x03	; 3
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	df 01       	movw	r26, r30
 4c2:	1d 92       	st	X+, r1
 4c4:	8a 95       	dec	r24
 4c6:	e9 f7       	brne	.-6      	; 0x4c2 <read_until_2crlf+0x1e>
	int cnt = 0;
 4c8:	00 e0       	ldi	r16, 0x00	; 0
 4ca:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1) {
		v[3] = USART0_receive();
 4cc:	0e 94 b4 03 	call	0x768	; 0x768 <USART0_receive>
 4d0:	8c 83       	std	Y+4, r24	; 0x04
		cnt++;
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if (strcmp(v, "\r\n\r\n") == 0)
 4d6:	66 e7       	ldi	r22, 0x76	; 118
 4d8:	71 e0       	ldi	r23, 0x01	; 1
 4da:	ce 01       	movw	r24, r28
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	0e 94 cb 03 	call	0x796	; 0x796 <strcmp>
 4e2:	89 2b       	or	r24, r25
 4e4:	49 f0       	breq	.+18     	; 0x4f8 <read_until_2crlf+0x54>
		return cnt;
		
		shift_left(v, 0, 4);
 4e6:	44 e0       	ldi	r20, 0x04	; 4
 4e8:	50 e0       	ldi	r21, 0x00	; 0
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	0e 94 ae 01 	call	0x35c	; 0x35c <shift_left>
	}
 4f6:	ea cf       	rjmp	.-44     	; 0x4cc <read_until_2crlf+0x28>
	
	return 0;	
}
 4f8:	c8 01       	movw	r24, r16
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	08 95       	ret

0000050e <send_request>:
Host: 192.168.4.3:8080\r\n\r\n"

#define REQUEST_LEN strlen(REQUEST)

void send_request()
{
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	c0 54       	subi	r28, 0x40	; 64
 51c:	d1 09       	sbc	r29, r1
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	de bf       	out	0x3e, r29	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	cd bf       	out	0x3d, r28	; 61
	char buf[64];
	
	USART0_print("AT+CIPSTART=0,\"TCP\",\"192.168.4.3\",8080\r\n");
 528:	8c e0       	ldi	r24, 0x0C	; 12
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 bc 03 	call	0x778	; 0x778 <USART0_print>
	read_until_ok();
 530:	0e 94 be 01 	call	0x37c	; 0x37c <read_until_ok>
	
	sprintf(buf, "AT+CIPSEND=0,%d\r\n", REQUEST_LEN);
 534:	1f 92       	push	r1
 536:	83 e3       	ldi	r24, 0x33	; 51
 538:	8f 93       	push	r24
 53a:	85 e3       	ldi	r24, 0x35	; 53
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	9f 93       	push	r25
 540:	8f 93       	push	r24
 542:	8e 01       	movw	r16, r28
 544:	0f 5f       	subi	r16, 0xFF	; 255
 546:	1f 4f       	sbci	r17, 0xFF	; 255
 548:	1f 93       	push	r17
 54a:	0f 93       	push	r16
 54c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <sprintf>
	USART0_print(buf);
 550:	c8 01       	movw	r24, r16
 552:	0e 94 bc 03 	call	0x778	; 0x778 <USART0_print>
	read_until_ok();
 556:	0e 94 be 01 	call	0x37c	; 0x37c <read_until_ok>
	
	USART0_print(REQUEST);
 55a:	87 e4       	ldi	r24, 0x47	; 71
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 bc 03 	call	0x778	; 0x778 <USART0_print>
	/* citim pana la "SEND OK" */
	read_until_ok();
 562:	0e 94 be 01 	call	0x37c	; 0x37c <read_until_ok>
	 */
	
	/* probabil Spring face close de unul singur, deci nu e neaparat nevoie
	 * de CIPCLOSE
	 */
	USART0_print("AT+CIPCLOSE=0\r\n");
 566:	8b e7       	ldi	r24, 0x7B	; 123
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 bc 03 	call	0x778	; 0x778 <USART0_print>
	read_until_ok();
 56e:	0e 94 be 01 	call	0x37c	; 0x37c <read_until_ok>
}
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	c0 5c       	subi	r28, 0xC0	; 192
 580:	df 4f       	sbci	r29, 0xFF	; 255
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	08 95       	ret

00000596 <__vector_5>:
#include "usart.h"			/* Include USART header file */

void send_request();

ISR(PCINT1_vect)
{
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
 5a0:	2f 93       	push	r18
 5a2:	3f 93       	push	r19
 5a4:	4f 93       	push	r20
 5a6:	5f 93       	push	r21
 5a8:	6f 93       	push	r22
 5aa:	7f 93       	push	r23
 5ac:	8f 93       	push	r24
 5ae:	9f 93       	push	r25
 5b0:	af 93       	push	r26
 5b2:	bf 93       	push	r27
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
	if ((PINB & (1<<PB2)) == 0) {
 5b8:	1a 99       	sbic	0x03, 2	; 3
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__vector_5+0x30>
		/* Inversam starea pinului. */
		PORTD ^= (1 << PD7);
 5bc:	8b b1       	in	r24, 0x0b	; 11
 5be:	80 58       	subi	r24, 0x80	; 128
 5c0:	8b b9       	out	0x0b, r24	; 11
		
		send_request();
 5c2:	0e 94 87 02 	call	0x50e	; 0x50e <send_request>
	}
}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <main>:
	USART0_print("AT+CIPCLOSE=0\r\n");
	read_until_ok();
}

int main(void)
{
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	ca 50       	subi	r28, 0x0A	; 10
 5f2:	d1 40       	sbci	r29, 0x01	; 1
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	f8 94       	cli
 5f8:	de bf       	out	0x3e, r29	; 62
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	cd bf       	out	0x3d, r28	; 61
	/* activate intreruperi globale */
	sei();
 5fe:	78 94       	sei
	
	/* configurarea butonului de la PD6 ca intrare */
	DDRB &= ~(1<<PB2);
 600:	22 98       	cbi	0x04, 2	; 4
	/* configurarea rezistentei de pull-up a PB2 */
	PORTB |= (1<<PB2);
 602:	2a 9a       	sbi	0x05, 2	; 5
	
	/* activare intrerupere pentru butonul PB2 */
	PCICR |= (1<<PCIE1);
 604:	e8 e6       	ldi	r30, 0x68	; 104
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	82 60       	ori	r24, 0x02	; 2
 60c:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT10);
 60e:	ec e6       	ldi	r30, 0x6C	; 108
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	84 60       	ori	r24, 0x04	; 4
 616:	80 83       	st	Z, r24
	
	LCD_init();
 618:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_init>
	USART0_init();
 61c:	0e 94 8f 03 	call	0x71e	; 0x71e <USART0_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 620:	2f ef       	ldi	r18, 0xFF	; 255
 622:	83 ed       	ldi	r24, 0xD3	; 211
 624:	90 e3       	ldi	r25, 0x30	; 48
 626:	21 50       	subi	r18, 0x01	; 1
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	90 40       	sbci	r25, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <main+0x3e>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <main+0x48>
 630:	00 00       	nop
    _delay_ms(1000);
	
	/* activare USER led */
	DDRD |= (1 << PD7);
 632:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1 << PD7);
 634:	5f 9a       	sbi	0x0b, 7	; 11
	
	/* activare backlight LED */
	DDRC |= (1 << PC2);
 636:	3a 9a       	sbi	0x07, 2	; 7
	PORTC |= (1 << PC2);
 638:	42 9a       	sbi	0x08, 2	; 8
	
	
	USART0_print("ATE0\r\n");
 63a:	8b e8       	ldi	r24, 0x8B	; 139
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	0e 94 bc 03 	call	0x778	; 0x778 <USART0_print>
	read_until_ok();
 642:	0e 94 be 01 	call	0x37c	; 0x37c <read_until_ok>
	
	USART0_print("AT+CIPMUX=1\r\n");
 646:	82 e9       	ldi	r24, 0x92	; 146
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 bc 03 	call	0x778	; 0x778 <USART0_print>
	read_until_ok();
 64e:	0e 94 be 01 	call	0x37c	; 0x37c <read_until_ok>
	
	USART0_print("AT+CIPSERVER=1,80\r\n");
 652:	80 ea       	ldi	r24, 0xA0	; 160
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	0e 94 bc 03 	call	0x778	; 0x778 <USART0_print>
	read_until_ok();
 65a:	0e 94 be 01 	call	0x37c	; 0x37c <read_until_ok>
	
	USART0_print("AT\r\n");
 65e:	84 eb       	ldi	r24, 0xB4	; 180
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	0e 94 bc 03 	call	0x778	; 0x778 <USART0_print>
	read_until_ok();
 666:	0e 94 be 01 	call	0x37c	; 0x37c <read_until_ok>
	
	LCD_printAt(0, "ok");
 66a:	69 eb       	ldi	r22, 0xB9	; 185
 66c:	71 e0       	ldi	r23, 0x01	; 1
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_printAt>
	
	int i = 0;
	char request[256] = "";
 674:	1a 82       	std	Y+2, r1	; 0x02
 676:	19 82       	std	Y+1, r1	; 0x01
 678:	fe 01       	movw	r30, r28
 67a:	33 96       	adiw	r30, 0x03	; 3
 67c:	8e ef       	ldi	r24, 0xFE	; 254
 67e:	df 01       	movw	r26, r30
 680:	1d 92       	st	X+, r1
 682:	8a 95       	dec	r24
 684:	e9 f7       	brne	.-6      	; 0x680 <main+0x98>
	USART0_print("AT\r\n");
	read_until_ok();
	
	LCD_printAt(0, "ok");
	
	int i = 0;
 686:	c1 2c       	mov	r12, r1
 688:	d1 2c       	mov	r13, r1
		
		generic_read_until("CLOSED\r\n");
		
		char v[10];
		i++;
		sprintf(v, "%d", i);
 68a:	0f 2e       	mov	r0, r31
 68c:	f4 ed       	ldi	r31, 0xD4	; 212
 68e:	8f 2e       	mov	r8, r31
 690:	f1 e0       	ldi	r31, 0x01	; 1
 692:	9f 2e       	mov	r9, r31
 694:	f0 2d       	mov	r31, r0
 696:	5e 01       	movw	r10, r28
 698:	b1 e0       	ldi	r27, 0x01	; 1
 69a:	ab 0e       	add	r10, r27
 69c:	bb 1e       	adc	r11, r27
	int i = 0;
	char request[256] = "";
	unsigned int cnt = 0;
	
	while(1) {
		generic_read_until("CONNECT\r\n");
 69e:	8c eb       	ldi	r24, 0xBC	; 188
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <generic_read_until>
		
		generic_read_until("GET ");
 6a6:	86 ec       	ldi	r24, 0xC6	; 198
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <generic_read_until>
 6ae:	fe 01       	movw	r30, r28
 6b0:	31 96       	adiw	r30, 0x01	; 1
 6b2:	7f 01       	movw	r14, r30
 6b4:	00 e0       	ldi	r16, 0x00	; 0
 6b6:	10 e0       	ldi	r17, 0x00	; 0
		while (1) {
			char c = USART0_receive();
 6b8:	0e 94 b4 03 	call	0x768	; 0x768 <USART0_receive>
			if (c != ' ') {
 6bc:	80 32       	cpi	r24, 0x20	; 32
 6be:	31 f0       	breq	.+12     	; 0x6cc <main+0xe4>
				request[cnt++] = c;
 6c0:	0f 5f       	subi	r16, 0xFF	; 255
 6c2:	1f 4f       	sbci	r17, 0xFF	; 255
 6c4:	d7 01       	movw	r26, r14
 6c6:	8d 93       	st	X+, r24
 6c8:	7d 01       	movw	r14, r26
			} else {
				break;
			}
		}
 6ca:	f6 cf       	rjmp	.-20     	; 0x6b8 <main+0xd0>
		request[cnt] = '\0';
 6cc:	e1 e0       	ldi	r30, 0x01	; 1
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	ec 0f       	add	r30, r28
 6d2:	fd 1f       	adc	r31, r29
 6d4:	e0 0f       	add	r30, r16
 6d6:	f1 1f       	adc	r31, r17
 6d8:	10 82       	st	Z, r1
		LCD_printAt(0, request);
 6da:	be 01       	movw	r22, r28
 6dc:	6f 5f       	subi	r22, 0xFF	; 255
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_printAt>
		cnt = 0;
		
		read_until_2crlf();
 6e6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <read_until_2crlf>
		
		generic_read_until("CLOSED\r\n");
 6ea:	8b ec       	ldi	r24, 0xCB	; 203
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <generic_read_until>
		
		char v[10];
		i++;
 6f2:	bf ef       	ldi	r27, 0xFF	; 255
 6f4:	cb 1a       	sub	r12, r27
 6f6:	db 0a       	sbc	r13, r27
		sprintf(v, "%d", i);
 6f8:	df 92       	push	r13
 6fa:	cf 92       	push	r12
 6fc:	9f 92       	push	r9
 6fe:	8f 92       	push	r8
 700:	bf 92       	push	r11
 702:	af 92       	push	r10
 704:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <sprintf>
		LCD_printAt(64, v);
 708:	b5 01       	movw	r22, r10
 70a:	80 e4       	ldi	r24, 0x40	; 64
 70c:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_printAt>
	}
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	c0 cf       	rjmp	.-128    	; 0x69e <main+0xb6>

0000071e <USART0_init>:
 * Functie de initializare a controllerului USART
 */
void USART0_init()
{
    /* seteaza baud rate la 115.2K */
    UBRR0H = 0;
 71e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = 8;
 722:	88 e0       	ldi	r24, 0x08	; 8
 724:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    
	/* selecteaza mod asincron */
	UCSR0C &= ~(1<<UMSEL00);
 728:	e2 ec       	ldi	r30, 0xC2	; 194
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	8f 7b       	andi	r24, 0xBF	; 191
 730:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<UMSEL01);
 732:	80 81       	ld	r24, Z
 734:	8f 77       	andi	r24, 0x7F	; 127
 736:	80 83       	st	Z, r24

    /* seteaza formatul frame-ului: 8 biti de date */
	UCSR0C |= (2<<UCSZ00);
 738:	80 81       	ld	r24, Z
 73a:	84 60       	ori	r24, 0x04	; 4
 73c:	80 83       	st	Z, r24
	
	/* 1 bit de stop */
    UCSR0C &= ~(1<<USBS0);
 73e:	80 81       	ld	r24, Z
 740:	87 7f       	andi	r24, 0xF7	; 247
 742:	80 83       	st	Z, r24
    
	/* fara paritate */
	UCSR0C &= ~(1<<UPM00);
 744:	80 81       	ld	r24, Z
 746:	8f 7e       	andi	r24, 0xEF	; 239
 748:	80 83       	st	Z, r24
    UCSR0C &= ~(1<<UPM01);
 74a:	80 81       	ld	r24, Z
 74c:	8f 7d       	andi	r24, 0xDF	; 223
 74e:	80 83       	st	Z, r24
	
	/* porneste transmitatorul si receptorul */
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
 750:	88 e1       	ldi	r24, 0x18	; 24
 752:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 756:	08 95       	ret

00000758 <USART0_transmit>:
 * @param data - caracterul de transmis
 */
void USART0_transmit(char data)
{
    /* asteapta pana bufferul e gol */
    while(!(UCSR0A & (1<<UDRE0)));
 758:	e0 ec       	ldi	r30, 0xC0	; 192
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	90 81       	ld	r25, Z
 75e:	95 ff       	sbrs	r25, 5
 760:	fd cf       	rjmp	.-6      	; 0x75c <USART0_transmit+0x4>

    /* pune datele in buffer; transmisia va porni automat in urma scrierii */
    UDR0 = data;
 762:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 766:	08 95       	ret

00000768 <USART0_receive>:
 * @return - caracterul primit
 */
char USART0_receive()
{
    /* asteapta cat timp bufferul e gol */
    while(!(UCSR0A & (1<<RXC0)));
 768:	e0 ec       	ldi	r30, 0xC0	; 192
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	88 23       	and	r24, r24
 770:	ec f7       	brge	.-6      	; 0x76c <USART0_receive+0x4>

    /* returneaza datele din buffer */
    return UDR0;
 772:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 776:	08 95       	ret

00000778 <USART0_print>:
 * Functie ce transmite un sir de caractere prin USART
 *
 * @param data - sirul (terminat cu '\0') de transmis
 */
void USART0_print(const char *data)
{
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	ec 01       	movw	r28, r24
    while(*data != '\0')
 77e:	88 81       	ld	r24, Y
 780:	88 23       	and	r24, r24
 782:	31 f0       	breq	.+12     	; 0x790 <USART0_print+0x18>
 784:	21 96       	adiw	r28, 0x01	; 1
        USART0_transmit(*data++);
 786:	0e 94 ac 03 	call	0x758	; 0x758 <USART0_transmit>
 *
 * @param data - sirul (terminat cu '\0') de transmis
 */
void USART0_print(const char *data)
{
    while(*data != '\0')
 78a:	89 91       	ld	r24, Y+
 78c:	81 11       	cpse	r24, r1
 78e:	fb cf       	rjmp	.-10     	; 0x786 <USART0_print+0xe>
        USART0_transmit(*data++);
}
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <strcmp>:
 796:	fb 01       	movw	r30, r22
 798:	dc 01       	movw	r26, r24
 79a:	8d 91       	ld	r24, X+
 79c:	01 90       	ld	r0, Z+
 79e:	80 19       	sub	r24, r0
 7a0:	01 10       	cpse	r0, r1
 7a2:	d9 f3       	breq	.-10     	; 0x79a <strcmp+0x4>
 7a4:	99 0b       	sbc	r25, r25
 7a6:	08 95       	ret

000007a8 <sprintf>:
 7a8:	ae e0       	ldi	r26, 0x0E	; 14
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	ea ed       	ldi	r30, 0xDA	; 218
 7ae:	f3 e0       	ldi	r31, 0x03	; 3
 7b0:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__prologue_saves__+0x1c>
 7b4:	0d 89       	ldd	r16, Y+21	; 0x15
 7b6:	1e 89       	ldd	r17, Y+22	; 0x16
 7b8:	86 e0       	ldi	r24, 0x06	; 6
 7ba:	8c 83       	std	Y+4, r24	; 0x04
 7bc:	1a 83       	std	Y+2, r17	; 0x02
 7be:	09 83       	std	Y+1, r16	; 0x01
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
 7c2:	9f e7       	ldi	r25, 0x7F	; 127
 7c4:	9e 83       	std	Y+6, r25	; 0x06
 7c6:	8d 83       	std	Y+5, r24	; 0x05
 7c8:	ae 01       	movw	r20, r28
 7ca:	47 5e       	subi	r20, 0xE7	; 231
 7cc:	5f 4f       	sbci	r21, 0xFF	; 255
 7ce:	6f 89       	ldd	r22, Y+23	; 0x17
 7d0:	78 8d       	ldd	r23, Y+24	; 0x18
 7d2:	ce 01       	movw	r24, r28
 7d4:	01 96       	adiw	r24, 0x01	; 1
 7d6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vfprintf>
 7da:	ef 81       	ldd	r30, Y+7	; 0x07
 7dc:	f8 85       	ldd	r31, Y+8	; 0x08
 7de:	e0 0f       	add	r30, r16
 7e0:	f1 1f       	adc	r31, r17
 7e2:	10 82       	st	Z, r1
 7e4:	2e 96       	adiw	r28, 0x0e	; 14
 7e6:	e4 e0       	ldi	r30, 0x04	; 4
 7e8:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__epilogue_restores__+0x1c>

000007ec <vfprintf>:
 7ec:	ab e0       	ldi	r26, 0x0B	; 11
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	ec ef       	ldi	r30, 0xFC	; 252
 7f2:	f3 e0       	ldi	r31, 0x03	; 3
 7f4:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__prologue_saves__>
 7f8:	6c 01       	movw	r12, r24
 7fa:	7b 01       	movw	r14, r22
 7fc:	8a 01       	movw	r16, r20
 7fe:	fc 01       	movw	r30, r24
 800:	17 82       	std	Z+7, r1	; 0x07
 802:	16 82       	std	Z+6, r1	; 0x06
 804:	83 81       	ldd	r24, Z+3	; 0x03
 806:	81 ff       	sbrs	r24, 1
 808:	cc c1       	rjmp	.+920    	; 0xba2 <vfprintf+0x3b6>
 80a:	ce 01       	movw	r24, r28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	3c 01       	movw	r6, r24
 810:	f6 01       	movw	r30, r12
 812:	93 81       	ldd	r25, Z+3	; 0x03
 814:	f7 01       	movw	r30, r14
 816:	93 fd       	sbrc	r25, 3
 818:	85 91       	lpm	r24, Z+
 81a:	93 ff       	sbrs	r25, 3
 81c:	81 91       	ld	r24, Z+
 81e:	7f 01       	movw	r14, r30
 820:	88 23       	and	r24, r24
 822:	09 f4       	brne	.+2      	; 0x826 <vfprintf+0x3a>
 824:	ba c1       	rjmp	.+884    	; 0xb9a <vfprintf+0x3ae>
 826:	85 32       	cpi	r24, 0x25	; 37
 828:	39 f4       	brne	.+14     	; 0x838 <vfprintf+0x4c>
 82a:	93 fd       	sbrc	r25, 3
 82c:	85 91       	lpm	r24, Z+
 82e:	93 ff       	sbrs	r25, 3
 830:	81 91       	ld	r24, Z+
 832:	7f 01       	movw	r14, r30
 834:	85 32       	cpi	r24, 0x25	; 37
 836:	29 f4       	brne	.+10     	; 0x842 <vfprintf+0x56>
 838:	b6 01       	movw	r22, r12
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 840:	e7 cf       	rjmp	.-50     	; 0x810 <vfprintf+0x24>
 842:	91 2c       	mov	r9, r1
 844:	21 2c       	mov	r2, r1
 846:	31 2c       	mov	r3, r1
 848:	ff e1       	ldi	r31, 0x1F	; 31
 84a:	f3 15       	cp	r31, r3
 84c:	d8 f0       	brcs	.+54     	; 0x884 <vfprintf+0x98>
 84e:	8b 32       	cpi	r24, 0x2B	; 43
 850:	79 f0       	breq	.+30     	; 0x870 <vfprintf+0x84>
 852:	38 f4       	brcc	.+14     	; 0x862 <vfprintf+0x76>
 854:	80 32       	cpi	r24, 0x20	; 32
 856:	79 f0       	breq	.+30     	; 0x876 <vfprintf+0x8a>
 858:	83 32       	cpi	r24, 0x23	; 35
 85a:	a1 f4       	brne	.+40     	; 0x884 <vfprintf+0x98>
 85c:	23 2d       	mov	r18, r3
 85e:	20 61       	ori	r18, 0x10	; 16
 860:	1d c0       	rjmp	.+58     	; 0x89c <vfprintf+0xb0>
 862:	8d 32       	cpi	r24, 0x2D	; 45
 864:	61 f0       	breq	.+24     	; 0x87e <vfprintf+0x92>
 866:	80 33       	cpi	r24, 0x30	; 48
 868:	69 f4       	brne	.+26     	; 0x884 <vfprintf+0x98>
 86a:	23 2d       	mov	r18, r3
 86c:	21 60       	ori	r18, 0x01	; 1
 86e:	16 c0       	rjmp	.+44     	; 0x89c <vfprintf+0xb0>
 870:	83 2d       	mov	r24, r3
 872:	82 60       	ori	r24, 0x02	; 2
 874:	38 2e       	mov	r3, r24
 876:	e3 2d       	mov	r30, r3
 878:	e4 60       	ori	r30, 0x04	; 4
 87a:	3e 2e       	mov	r3, r30
 87c:	2a c0       	rjmp	.+84     	; 0x8d2 <vfprintf+0xe6>
 87e:	f3 2d       	mov	r31, r3
 880:	f8 60       	ori	r31, 0x08	; 8
 882:	1d c0       	rjmp	.+58     	; 0x8be <vfprintf+0xd2>
 884:	37 fc       	sbrc	r3, 7
 886:	2d c0       	rjmp	.+90     	; 0x8e2 <vfprintf+0xf6>
 888:	20 ed       	ldi	r18, 0xD0	; 208
 88a:	28 0f       	add	r18, r24
 88c:	2a 30       	cpi	r18, 0x0A	; 10
 88e:	40 f0       	brcs	.+16     	; 0x8a0 <vfprintf+0xb4>
 890:	8e 32       	cpi	r24, 0x2E	; 46
 892:	b9 f4       	brne	.+46     	; 0x8c2 <vfprintf+0xd6>
 894:	36 fc       	sbrc	r3, 6
 896:	81 c1       	rjmp	.+770    	; 0xb9a <vfprintf+0x3ae>
 898:	23 2d       	mov	r18, r3
 89a:	20 64       	ori	r18, 0x40	; 64
 89c:	32 2e       	mov	r3, r18
 89e:	19 c0       	rjmp	.+50     	; 0x8d2 <vfprintf+0xe6>
 8a0:	36 fe       	sbrs	r3, 6
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <vfprintf+0xc4>
 8a4:	8a e0       	ldi	r24, 0x0A	; 10
 8a6:	98 9e       	mul	r9, r24
 8a8:	20 0d       	add	r18, r0
 8aa:	11 24       	eor	r1, r1
 8ac:	92 2e       	mov	r9, r18
 8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <vfprintf+0xe6>
 8b0:	ea e0       	ldi	r30, 0x0A	; 10
 8b2:	2e 9e       	mul	r2, r30
 8b4:	20 0d       	add	r18, r0
 8b6:	11 24       	eor	r1, r1
 8b8:	22 2e       	mov	r2, r18
 8ba:	f3 2d       	mov	r31, r3
 8bc:	f0 62       	ori	r31, 0x20	; 32
 8be:	3f 2e       	mov	r3, r31
 8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <vfprintf+0xe6>
 8c2:	8c 36       	cpi	r24, 0x6C	; 108
 8c4:	21 f4       	brne	.+8      	; 0x8ce <vfprintf+0xe2>
 8c6:	83 2d       	mov	r24, r3
 8c8:	80 68       	ori	r24, 0x80	; 128
 8ca:	38 2e       	mov	r3, r24
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0xe6>
 8ce:	88 36       	cpi	r24, 0x68	; 104
 8d0:	41 f4       	brne	.+16     	; 0x8e2 <vfprintf+0xf6>
 8d2:	f7 01       	movw	r30, r14
 8d4:	93 fd       	sbrc	r25, 3
 8d6:	85 91       	lpm	r24, Z+
 8d8:	93 ff       	sbrs	r25, 3
 8da:	81 91       	ld	r24, Z+
 8dc:	7f 01       	movw	r14, r30
 8de:	81 11       	cpse	r24, r1
 8e0:	b3 cf       	rjmp	.-154    	; 0x848 <vfprintf+0x5c>
 8e2:	98 2f       	mov	r25, r24
 8e4:	9f 7d       	andi	r25, 0xDF	; 223
 8e6:	95 54       	subi	r25, 0x45	; 69
 8e8:	93 30       	cpi	r25, 0x03	; 3
 8ea:	28 f4       	brcc	.+10     	; 0x8f6 <vfprintf+0x10a>
 8ec:	0c 5f       	subi	r16, 0xFC	; 252
 8ee:	1f 4f       	sbci	r17, 0xFF	; 255
 8f0:	9f e3       	ldi	r25, 0x3F	; 63
 8f2:	99 83       	std	Y+1, r25	; 0x01
 8f4:	0d c0       	rjmp	.+26     	; 0x910 <vfprintf+0x124>
 8f6:	83 36       	cpi	r24, 0x63	; 99
 8f8:	31 f0       	breq	.+12     	; 0x906 <vfprintf+0x11a>
 8fa:	83 37       	cpi	r24, 0x73	; 115
 8fc:	71 f0       	breq	.+28     	; 0x91a <vfprintf+0x12e>
 8fe:	83 35       	cpi	r24, 0x53	; 83
 900:	09 f0       	breq	.+2      	; 0x904 <vfprintf+0x118>
 902:	59 c0       	rjmp	.+178    	; 0x9b6 <vfprintf+0x1ca>
 904:	21 c0       	rjmp	.+66     	; 0x948 <vfprintf+0x15c>
 906:	f8 01       	movw	r30, r16
 908:	80 81       	ld	r24, Z
 90a:	89 83       	std	Y+1, r24	; 0x01
 90c:	0e 5f       	subi	r16, 0xFE	; 254
 90e:	1f 4f       	sbci	r17, 0xFF	; 255
 910:	88 24       	eor	r8, r8
 912:	83 94       	inc	r8
 914:	91 2c       	mov	r9, r1
 916:	53 01       	movw	r10, r6
 918:	13 c0       	rjmp	.+38     	; 0x940 <vfprintf+0x154>
 91a:	28 01       	movw	r4, r16
 91c:	f2 e0       	ldi	r31, 0x02	; 2
 91e:	4f 0e       	add	r4, r31
 920:	51 1c       	adc	r5, r1
 922:	f8 01       	movw	r30, r16
 924:	a0 80       	ld	r10, Z
 926:	b1 80       	ldd	r11, Z+1	; 0x01
 928:	36 fe       	sbrs	r3, 6
 92a:	03 c0       	rjmp	.+6      	; 0x932 <vfprintf+0x146>
 92c:	69 2d       	mov	r22, r9
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	02 c0       	rjmp	.+4      	; 0x936 <vfprintf+0x14a>
 932:	6f ef       	ldi	r22, 0xFF	; 255
 934:	7f ef       	ldi	r23, 0xFF	; 255
 936:	c5 01       	movw	r24, r10
 938:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <strnlen>
 93c:	4c 01       	movw	r8, r24
 93e:	82 01       	movw	r16, r4
 940:	f3 2d       	mov	r31, r3
 942:	ff 77       	andi	r31, 0x7F	; 127
 944:	3f 2e       	mov	r3, r31
 946:	16 c0       	rjmp	.+44     	; 0x974 <vfprintf+0x188>
 948:	28 01       	movw	r4, r16
 94a:	22 e0       	ldi	r18, 0x02	; 2
 94c:	42 0e       	add	r4, r18
 94e:	51 1c       	adc	r5, r1
 950:	f8 01       	movw	r30, r16
 952:	a0 80       	ld	r10, Z
 954:	b1 80       	ldd	r11, Z+1	; 0x01
 956:	36 fe       	sbrs	r3, 6
 958:	03 c0       	rjmp	.+6      	; 0x960 <vfprintf+0x174>
 95a:	69 2d       	mov	r22, r9
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <vfprintf+0x178>
 960:	6f ef       	ldi	r22, 0xFF	; 255
 962:	7f ef       	ldi	r23, 0xFF	; 255
 964:	c5 01       	movw	r24, r10
 966:	0e 94 d7 05 	call	0xbae	; 0xbae <strnlen_P>
 96a:	4c 01       	movw	r8, r24
 96c:	f3 2d       	mov	r31, r3
 96e:	f0 68       	ori	r31, 0x80	; 128
 970:	3f 2e       	mov	r3, r31
 972:	82 01       	movw	r16, r4
 974:	33 fc       	sbrc	r3, 3
 976:	1b c0       	rjmp	.+54     	; 0x9ae <vfprintf+0x1c2>
 978:	82 2d       	mov	r24, r2
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	88 16       	cp	r8, r24
 97e:	99 06       	cpc	r9, r25
 980:	b0 f4       	brcc	.+44     	; 0x9ae <vfprintf+0x1c2>
 982:	b6 01       	movw	r22, r12
 984:	80 e2       	ldi	r24, 0x20	; 32
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 98c:	2a 94       	dec	r2
 98e:	f4 cf       	rjmp	.-24     	; 0x978 <vfprintf+0x18c>
 990:	f5 01       	movw	r30, r10
 992:	37 fc       	sbrc	r3, 7
 994:	85 91       	lpm	r24, Z+
 996:	37 fe       	sbrs	r3, 7
 998:	81 91       	ld	r24, Z+
 99a:	5f 01       	movw	r10, r30
 99c:	b6 01       	movw	r22, r12
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 9a4:	21 10       	cpse	r2, r1
 9a6:	2a 94       	dec	r2
 9a8:	21 e0       	ldi	r18, 0x01	; 1
 9aa:	82 1a       	sub	r8, r18
 9ac:	91 08       	sbc	r9, r1
 9ae:	81 14       	cp	r8, r1
 9b0:	91 04       	cpc	r9, r1
 9b2:	71 f7       	brne	.-36     	; 0x990 <vfprintf+0x1a4>
 9b4:	e8 c0       	rjmp	.+464    	; 0xb86 <vfprintf+0x39a>
 9b6:	84 36       	cpi	r24, 0x64	; 100
 9b8:	11 f0       	breq	.+4      	; 0x9be <vfprintf+0x1d2>
 9ba:	89 36       	cpi	r24, 0x69	; 105
 9bc:	41 f5       	brne	.+80     	; 0xa0e <vfprintf+0x222>
 9be:	f8 01       	movw	r30, r16
 9c0:	37 fe       	sbrs	r3, 7
 9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <vfprintf+0x1e6>
 9c4:	60 81       	ld	r22, Z
 9c6:	71 81       	ldd	r23, Z+1	; 0x01
 9c8:	82 81       	ldd	r24, Z+2	; 0x02
 9ca:	93 81       	ldd	r25, Z+3	; 0x03
 9cc:	0c 5f       	subi	r16, 0xFC	; 252
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <vfprintf+0x1f6>
 9d2:	60 81       	ld	r22, Z
 9d4:	71 81       	ldd	r23, Z+1	; 0x01
 9d6:	07 2e       	mov	r0, r23
 9d8:	00 0c       	add	r0, r0
 9da:	88 0b       	sbc	r24, r24
 9dc:	99 0b       	sbc	r25, r25
 9de:	0e 5f       	subi	r16, 0xFE	; 254
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	f3 2d       	mov	r31, r3
 9e4:	ff 76       	andi	r31, 0x6F	; 111
 9e6:	3f 2e       	mov	r3, r31
 9e8:	97 ff       	sbrs	r25, 7
 9ea:	09 c0       	rjmp	.+18     	; 0x9fe <vfprintf+0x212>
 9ec:	90 95       	com	r25
 9ee:	80 95       	com	r24
 9f0:	70 95       	com	r23
 9f2:	61 95       	neg	r22
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	f0 68       	ori	r31, 0x80	; 128
 9fc:	3f 2e       	mov	r3, r31
 9fe:	2a e0       	ldi	r18, 0x0A	; 10
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	a3 01       	movw	r20, r6
 a04:	0e 94 29 06 	call	0xc52	; 0xc52 <__ultoa_invert>
 a08:	88 2e       	mov	r8, r24
 a0a:	86 18       	sub	r8, r6
 a0c:	45 c0       	rjmp	.+138    	; 0xa98 <vfprintf+0x2ac>
 a0e:	85 37       	cpi	r24, 0x75	; 117
 a10:	31 f4       	brne	.+12     	; 0xa1e <vfprintf+0x232>
 a12:	23 2d       	mov	r18, r3
 a14:	2f 7e       	andi	r18, 0xEF	; 239
 a16:	b2 2e       	mov	r11, r18
 a18:	2a e0       	ldi	r18, 0x0A	; 10
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	25 c0       	rjmp	.+74     	; 0xa68 <vfprintf+0x27c>
 a1e:	93 2d       	mov	r25, r3
 a20:	99 7f       	andi	r25, 0xF9	; 249
 a22:	b9 2e       	mov	r11, r25
 a24:	8f 36       	cpi	r24, 0x6F	; 111
 a26:	c1 f0       	breq	.+48     	; 0xa58 <vfprintf+0x26c>
 a28:	18 f4       	brcc	.+6      	; 0xa30 <vfprintf+0x244>
 a2a:	88 35       	cpi	r24, 0x58	; 88
 a2c:	79 f0       	breq	.+30     	; 0xa4c <vfprintf+0x260>
 a2e:	b5 c0       	rjmp	.+362    	; 0xb9a <vfprintf+0x3ae>
 a30:	80 37       	cpi	r24, 0x70	; 112
 a32:	19 f0       	breq	.+6      	; 0xa3a <vfprintf+0x24e>
 a34:	88 37       	cpi	r24, 0x78	; 120
 a36:	21 f0       	breq	.+8      	; 0xa40 <vfprintf+0x254>
 a38:	b0 c0       	rjmp	.+352    	; 0xb9a <vfprintf+0x3ae>
 a3a:	e9 2f       	mov	r30, r25
 a3c:	e0 61       	ori	r30, 0x10	; 16
 a3e:	be 2e       	mov	r11, r30
 a40:	b4 fe       	sbrs	r11, 4
 a42:	0d c0       	rjmp	.+26     	; 0xa5e <vfprintf+0x272>
 a44:	fb 2d       	mov	r31, r11
 a46:	f4 60       	ori	r31, 0x04	; 4
 a48:	bf 2e       	mov	r11, r31
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <vfprintf+0x272>
 a4c:	34 fe       	sbrs	r3, 4
 a4e:	0a c0       	rjmp	.+20     	; 0xa64 <vfprintf+0x278>
 a50:	29 2f       	mov	r18, r25
 a52:	26 60       	ori	r18, 0x06	; 6
 a54:	b2 2e       	mov	r11, r18
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <vfprintf+0x278>
 a58:	28 e0       	ldi	r18, 0x08	; 8
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	05 c0       	rjmp	.+10     	; 0xa68 <vfprintf+0x27c>
 a5e:	20 e1       	ldi	r18, 0x10	; 16
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x27c>
 a64:	20 e1       	ldi	r18, 0x10	; 16
 a66:	32 e0       	ldi	r19, 0x02	; 2
 a68:	f8 01       	movw	r30, r16
 a6a:	b7 fe       	sbrs	r11, 7
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <vfprintf+0x290>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	82 81       	ldd	r24, Z+2	; 0x02
 a74:	93 81       	ldd	r25, Z+3	; 0x03
 a76:	0c 5f       	subi	r16, 0xFC	; 252
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <vfprintf+0x29c>
 a7c:	60 81       	ld	r22, Z
 a7e:	71 81       	ldd	r23, Z+1	; 0x01
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 5f       	subi	r16, 0xFE	; 254
 a86:	1f 4f       	sbci	r17, 0xFF	; 255
 a88:	a3 01       	movw	r20, r6
 a8a:	0e 94 29 06 	call	0xc52	; 0xc52 <__ultoa_invert>
 a8e:	88 2e       	mov	r8, r24
 a90:	86 18       	sub	r8, r6
 a92:	fb 2d       	mov	r31, r11
 a94:	ff 77       	andi	r31, 0x7F	; 127
 a96:	3f 2e       	mov	r3, r31
 a98:	36 fe       	sbrs	r3, 6
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <vfprintf+0x2ca>
 a9c:	23 2d       	mov	r18, r3
 a9e:	2e 7f       	andi	r18, 0xFE	; 254
 aa0:	a2 2e       	mov	r10, r18
 aa2:	89 14       	cp	r8, r9
 aa4:	58 f4       	brcc	.+22     	; 0xabc <vfprintf+0x2d0>
 aa6:	34 fe       	sbrs	r3, 4
 aa8:	0b c0       	rjmp	.+22     	; 0xac0 <vfprintf+0x2d4>
 aaa:	32 fc       	sbrc	r3, 2
 aac:	09 c0       	rjmp	.+18     	; 0xac0 <vfprintf+0x2d4>
 aae:	83 2d       	mov	r24, r3
 ab0:	8e 7e       	andi	r24, 0xEE	; 238
 ab2:	a8 2e       	mov	r10, r24
 ab4:	05 c0       	rjmp	.+10     	; 0xac0 <vfprintf+0x2d4>
 ab6:	b8 2c       	mov	r11, r8
 ab8:	a3 2c       	mov	r10, r3
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <vfprintf+0x2d6>
 abc:	b8 2c       	mov	r11, r8
 abe:	01 c0       	rjmp	.+2      	; 0xac2 <vfprintf+0x2d6>
 ac0:	b9 2c       	mov	r11, r9
 ac2:	a4 fe       	sbrs	r10, 4
 ac4:	0f c0       	rjmp	.+30     	; 0xae4 <vfprintf+0x2f8>
 ac6:	fe 01       	movw	r30, r28
 ac8:	e8 0d       	add	r30, r8
 aca:	f1 1d       	adc	r31, r1
 acc:	80 81       	ld	r24, Z
 ace:	80 33       	cpi	r24, 0x30	; 48
 ad0:	21 f4       	brne	.+8      	; 0xada <vfprintf+0x2ee>
 ad2:	9a 2d       	mov	r25, r10
 ad4:	99 7e       	andi	r25, 0xE9	; 233
 ad6:	a9 2e       	mov	r10, r25
 ad8:	09 c0       	rjmp	.+18     	; 0xaec <vfprintf+0x300>
 ada:	a2 fe       	sbrs	r10, 2
 adc:	06 c0       	rjmp	.+12     	; 0xaea <vfprintf+0x2fe>
 ade:	b3 94       	inc	r11
 ae0:	b3 94       	inc	r11
 ae2:	04 c0       	rjmp	.+8      	; 0xaec <vfprintf+0x300>
 ae4:	8a 2d       	mov	r24, r10
 ae6:	86 78       	andi	r24, 0x86	; 134
 ae8:	09 f0       	breq	.+2      	; 0xaec <vfprintf+0x300>
 aea:	b3 94       	inc	r11
 aec:	a3 fc       	sbrc	r10, 3
 aee:	11 c0       	rjmp	.+34     	; 0xb12 <vfprintf+0x326>
 af0:	a0 fe       	sbrs	r10, 0
 af2:	06 c0       	rjmp	.+12     	; 0xb00 <vfprintf+0x314>
 af4:	b2 14       	cp	r11, r2
 af6:	88 f4       	brcc	.+34     	; 0xb1a <vfprintf+0x32e>
 af8:	28 0c       	add	r2, r8
 afa:	92 2c       	mov	r9, r2
 afc:	9b 18       	sub	r9, r11
 afe:	0e c0       	rjmp	.+28     	; 0xb1c <vfprintf+0x330>
 b00:	b2 14       	cp	r11, r2
 b02:	60 f4       	brcc	.+24     	; 0xb1c <vfprintf+0x330>
 b04:	b6 01       	movw	r22, r12
 b06:	80 e2       	ldi	r24, 0x20	; 32
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b0e:	b3 94       	inc	r11
 b10:	f7 cf       	rjmp	.-18     	; 0xb00 <vfprintf+0x314>
 b12:	b2 14       	cp	r11, r2
 b14:	18 f4       	brcc	.+6      	; 0xb1c <vfprintf+0x330>
 b16:	2b 18       	sub	r2, r11
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <vfprintf+0x332>
 b1a:	98 2c       	mov	r9, r8
 b1c:	21 2c       	mov	r2, r1
 b1e:	a4 fe       	sbrs	r10, 4
 b20:	10 c0       	rjmp	.+32     	; 0xb42 <vfprintf+0x356>
 b22:	b6 01       	movw	r22, r12
 b24:	80 e3       	ldi	r24, 0x30	; 48
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b2c:	a2 fe       	sbrs	r10, 2
 b2e:	17 c0       	rjmp	.+46     	; 0xb5e <vfprintf+0x372>
 b30:	a1 fc       	sbrc	r10, 1
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <vfprintf+0x34e>
 b34:	88 e7       	ldi	r24, 0x78	; 120
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <vfprintf+0x352>
 b3a:	88 e5       	ldi	r24, 0x58	; 88
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	b6 01       	movw	r22, r12
 b40:	0c c0       	rjmp	.+24     	; 0xb5a <vfprintf+0x36e>
 b42:	8a 2d       	mov	r24, r10
 b44:	86 78       	andi	r24, 0x86	; 134
 b46:	59 f0       	breq	.+22     	; 0xb5e <vfprintf+0x372>
 b48:	a1 fe       	sbrs	r10, 1
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <vfprintf+0x364>
 b4c:	8b e2       	ldi	r24, 0x2B	; 43
 b4e:	01 c0       	rjmp	.+2      	; 0xb52 <vfprintf+0x366>
 b50:	80 e2       	ldi	r24, 0x20	; 32
 b52:	a7 fc       	sbrc	r10, 7
 b54:	8d e2       	ldi	r24, 0x2D	; 45
 b56:	b6 01       	movw	r22, r12
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b5e:	89 14       	cp	r8, r9
 b60:	38 f4       	brcc	.+14     	; 0xb70 <vfprintf+0x384>
 b62:	b6 01       	movw	r22, r12
 b64:	80 e3       	ldi	r24, 0x30	; 48
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b6c:	9a 94       	dec	r9
 b6e:	f7 cf       	rjmp	.-18     	; 0xb5e <vfprintf+0x372>
 b70:	8a 94       	dec	r8
 b72:	f3 01       	movw	r30, r6
 b74:	e8 0d       	add	r30, r8
 b76:	f1 1d       	adc	r31, r1
 b78:	80 81       	ld	r24, Z
 b7a:	b6 01       	movw	r22, r12
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b82:	81 10       	cpse	r8, r1
 b84:	f5 cf       	rjmp	.-22     	; 0xb70 <vfprintf+0x384>
 b86:	22 20       	and	r2, r2
 b88:	09 f4       	brne	.+2      	; 0xb8c <vfprintf+0x3a0>
 b8a:	42 ce       	rjmp	.-892    	; 0x810 <vfprintf+0x24>
 b8c:	b6 01       	movw	r22, r12
 b8e:	80 e2       	ldi	r24, 0x20	; 32
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	0e 94 ed 05 	call	0xbda	; 0xbda <fputc>
 b96:	2a 94       	dec	r2
 b98:	f6 cf       	rjmp	.-20     	; 0xb86 <vfprintf+0x39a>
 b9a:	f6 01       	movw	r30, r12
 b9c:	86 81       	ldd	r24, Z+6	; 0x06
 b9e:	97 81       	ldd	r25, Z+7	; 0x07
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <vfprintf+0x3ba>
 ba2:	8f ef       	ldi	r24, 0xFF	; 255
 ba4:	9f ef       	ldi	r25, 0xFF	; 255
 ba6:	2b 96       	adiw	r28, 0x0b	; 11
 ba8:	e2 e1       	ldi	r30, 0x12	; 18
 baa:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__epilogue_restores__>

00000bae <strnlen_P>:
 bae:	fc 01       	movw	r30, r24
 bb0:	05 90       	lpm	r0, Z+
 bb2:	61 50       	subi	r22, 0x01	; 1
 bb4:	70 40       	sbci	r23, 0x00	; 0
 bb6:	01 10       	cpse	r0, r1
 bb8:	d8 f7       	brcc	.-10     	; 0xbb0 <strnlen_P+0x2>
 bba:	80 95       	com	r24
 bbc:	90 95       	com	r25
 bbe:	8e 0f       	add	r24, r30
 bc0:	9f 1f       	adc	r25, r31
 bc2:	08 95       	ret

00000bc4 <strnlen>:
 bc4:	fc 01       	movw	r30, r24
 bc6:	61 50       	subi	r22, 0x01	; 1
 bc8:	70 40       	sbci	r23, 0x00	; 0
 bca:	01 90       	ld	r0, Z+
 bcc:	01 10       	cpse	r0, r1
 bce:	d8 f7       	brcc	.-10     	; 0xbc6 <strnlen+0x2>
 bd0:	80 95       	com	r24
 bd2:	90 95       	com	r25
 bd4:	8e 0f       	add	r24, r30
 bd6:	9f 1f       	adc	r25, r31
 bd8:	08 95       	ret

00000bda <fputc>:
 bda:	0f 93       	push	r16
 bdc:	1f 93       	push	r17
 bde:	cf 93       	push	r28
 be0:	df 93       	push	r29
 be2:	fb 01       	movw	r30, r22
 be4:	23 81       	ldd	r18, Z+3	; 0x03
 be6:	21 fd       	sbrc	r18, 1
 be8:	03 c0       	rjmp	.+6      	; 0xbf0 <fputc+0x16>
 bea:	8f ef       	ldi	r24, 0xFF	; 255
 bec:	9f ef       	ldi	r25, 0xFF	; 255
 bee:	2c c0       	rjmp	.+88     	; 0xc48 <fputc+0x6e>
 bf0:	22 ff       	sbrs	r18, 2
 bf2:	16 c0       	rjmp	.+44     	; 0xc20 <fputc+0x46>
 bf4:	46 81       	ldd	r20, Z+6	; 0x06
 bf6:	57 81       	ldd	r21, Z+7	; 0x07
 bf8:	24 81       	ldd	r18, Z+4	; 0x04
 bfa:	35 81       	ldd	r19, Z+5	; 0x05
 bfc:	42 17       	cp	r20, r18
 bfe:	53 07       	cpc	r21, r19
 c00:	44 f4       	brge	.+16     	; 0xc12 <fputc+0x38>
 c02:	a0 81       	ld	r26, Z
 c04:	b1 81       	ldd	r27, Z+1	; 0x01
 c06:	9d 01       	movw	r18, r26
 c08:	2f 5f       	subi	r18, 0xFF	; 255
 c0a:	3f 4f       	sbci	r19, 0xFF	; 255
 c0c:	31 83       	std	Z+1, r19	; 0x01
 c0e:	20 83       	st	Z, r18
 c10:	8c 93       	st	X, r24
 c12:	26 81       	ldd	r18, Z+6	; 0x06
 c14:	37 81       	ldd	r19, Z+7	; 0x07
 c16:	2f 5f       	subi	r18, 0xFF	; 255
 c18:	3f 4f       	sbci	r19, 0xFF	; 255
 c1a:	37 83       	std	Z+7, r19	; 0x07
 c1c:	26 83       	std	Z+6, r18	; 0x06
 c1e:	14 c0       	rjmp	.+40     	; 0xc48 <fputc+0x6e>
 c20:	8b 01       	movw	r16, r22
 c22:	ec 01       	movw	r28, r24
 c24:	fb 01       	movw	r30, r22
 c26:	00 84       	ldd	r0, Z+8	; 0x08
 c28:	f1 85       	ldd	r31, Z+9	; 0x09
 c2a:	e0 2d       	mov	r30, r0
 c2c:	09 95       	icall
 c2e:	89 2b       	or	r24, r25
 c30:	e1 f6       	brne	.-72     	; 0xbea <fputc+0x10>
 c32:	d8 01       	movw	r26, r16
 c34:	16 96       	adiw	r26, 0x06	; 6
 c36:	8d 91       	ld	r24, X+
 c38:	9c 91       	ld	r25, X
 c3a:	17 97       	sbiw	r26, 0x07	; 7
 c3c:	01 96       	adiw	r24, 0x01	; 1
 c3e:	17 96       	adiw	r26, 0x07	; 7
 c40:	9c 93       	st	X, r25
 c42:	8e 93       	st	-X, r24
 c44:	16 97       	sbiw	r26, 0x06	; 6
 c46:	ce 01       	movw	r24, r28
 c48:	df 91       	pop	r29
 c4a:	cf 91       	pop	r28
 c4c:	1f 91       	pop	r17
 c4e:	0f 91       	pop	r16
 c50:	08 95       	ret

00000c52 <__ultoa_invert>:
 c52:	fa 01       	movw	r30, r20
 c54:	aa 27       	eor	r26, r26
 c56:	28 30       	cpi	r18, 0x08	; 8
 c58:	51 f1       	breq	.+84     	; 0xcae <__ultoa_invert+0x5c>
 c5a:	20 31       	cpi	r18, 0x10	; 16
 c5c:	81 f1       	breq	.+96     	; 0xcbe <__ultoa_invert+0x6c>
 c5e:	e8 94       	clt
 c60:	6f 93       	push	r22
 c62:	6e 7f       	andi	r22, 0xFE	; 254
 c64:	6e 5f       	subi	r22, 0xFE	; 254
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	af 4f       	sbci	r26, 0xFF	; 255
 c6e:	b1 e0       	ldi	r27, 0x01	; 1
 c70:	3e d0       	rcall	.+124    	; 0xcee <__ultoa_invert+0x9c>
 c72:	b4 e0       	ldi	r27, 0x04	; 4
 c74:	3c d0       	rcall	.+120    	; 0xcee <__ultoa_invert+0x9c>
 c76:	67 0f       	add	r22, r23
 c78:	78 1f       	adc	r23, r24
 c7a:	89 1f       	adc	r24, r25
 c7c:	9a 1f       	adc	r25, r26
 c7e:	a1 1d       	adc	r26, r1
 c80:	68 0f       	add	r22, r24
 c82:	79 1f       	adc	r23, r25
 c84:	8a 1f       	adc	r24, r26
 c86:	91 1d       	adc	r25, r1
 c88:	a1 1d       	adc	r26, r1
 c8a:	6a 0f       	add	r22, r26
 c8c:	71 1d       	adc	r23, r1
 c8e:	81 1d       	adc	r24, r1
 c90:	91 1d       	adc	r25, r1
 c92:	a1 1d       	adc	r26, r1
 c94:	20 d0       	rcall	.+64     	; 0xcd6 <__ultoa_invert+0x84>
 c96:	09 f4       	brne	.+2      	; 0xc9a <__ultoa_invert+0x48>
 c98:	68 94       	set
 c9a:	3f 91       	pop	r19
 c9c:	2a e0       	ldi	r18, 0x0A	; 10
 c9e:	26 9f       	mul	r18, r22
 ca0:	11 24       	eor	r1, r1
 ca2:	30 19       	sub	r19, r0
 ca4:	30 5d       	subi	r19, 0xD0	; 208
 ca6:	31 93       	st	Z+, r19
 ca8:	de f6       	brtc	.-74     	; 0xc60 <__ultoa_invert+0xe>
 caa:	cf 01       	movw	r24, r30
 cac:	08 95       	ret
 cae:	46 2f       	mov	r20, r22
 cb0:	47 70       	andi	r20, 0x07	; 7
 cb2:	40 5d       	subi	r20, 0xD0	; 208
 cb4:	41 93       	st	Z+, r20
 cb6:	b3 e0       	ldi	r27, 0x03	; 3
 cb8:	0f d0       	rcall	.+30     	; 0xcd8 <__ultoa_invert+0x86>
 cba:	c9 f7       	brne	.-14     	; 0xcae <__ultoa_invert+0x5c>
 cbc:	f6 cf       	rjmp	.-20     	; 0xcaa <__ultoa_invert+0x58>
 cbe:	46 2f       	mov	r20, r22
 cc0:	4f 70       	andi	r20, 0x0F	; 15
 cc2:	40 5d       	subi	r20, 0xD0	; 208
 cc4:	4a 33       	cpi	r20, 0x3A	; 58
 cc6:	18 f0       	brcs	.+6      	; 0xcce <__ultoa_invert+0x7c>
 cc8:	49 5d       	subi	r20, 0xD9	; 217
 cca:	31 fd       	sbrc	r19, 1
 ccc:	40 52       	subi	r20, 0x20	; 32
 cce:	41 93       	st	Z+, r20
 cd0:	02 d0       	rcall	.+4      	; 0xcd6 <__ultoa_invert+0x84>
 cd2:	a9 f7       	brne	.-22     	; 0xcbe <__ultoa_invert+0x6c>
 cd4:	ea cf       	rjmp	.-44     	; 0xcaa <__ultoa_invert+0x58>
 cd6:	b4 e0       	ldi	r27, 0x04	; 4
 cd8:	a6 95       	lsr	r26
 cda:	97 95       	ror	r25
 cdc:	87 95       	ror	r24
 cde:	77 95       	ror	r23
 ce0:	67 95       	ror	r22
 ce2:	ba 95       	dec	r27
 ce4:	c9 f7       	brne	.-14     	; 0xcd8 <__ultoa_invert+0x86>
 ce6:	00 97       	sbiw	r24, 0x00	; 0
 ce8:	61 05       	cpc	r22, r1
 cea:	71 05       	cpc	r23, r1
 cec:	08 95       	ret
 cee:	9b 01       	movw	r18, r22
 cf0:	ac 01       	movw	r20, r24
 cf2:	0a 2e       	mov	r0, r26
 cf4:	06 94       	lsr	r0
 cf6:	57 95       	ror	r21
 cf8:	47 95       	ror	r20
 cfa:	37 95       	ror	r19
 cfc:	27 95       	ror	r18
 cfe:	ba 95       	dec	r27
 d00:	c9 f7       	brne	.-14     	; 0xcf4 <__ultoa_invert+0xa2>
 d02:	62 0f       	add	r22, r18
 d04:	73 1f       	adc	r23, r19
 d06:	84 1f       	adc	r24, r20
 d08:	95 1f       	adc	r25, r21
 d0a:	a0 1d       	adc	r26, r0
 d0c:	08 95       	ret

00000d0e <__prologue_saves__>:
 d0e:	2f 92       	push	r2
 d10:	3f 92       	push	r3
 d12:	4f 92       	push	r4
 d14:	5f 92       	push	r5
 d16:	6f 92       	push	r6
 d18:	7f 92       	push	r7
 d1a:	8f 92       	push	r8
 d1c:	9f 92       	push	r9
 d1e:	af 92       	push	r10
 d20:	bf 92       	push	r11
 d22:	cf 92       	push	r12
 d24:	df 92       	push	r13
 d26:	ef 92       	push	r14
 d28:	ff 92       	push	r15
 d2a:	0f 93       	push	r16
 d2c:	1f 93       	push	r17
 d2e:	cf 93       	push	r28
 d30:	df 93       	push	r29
 d32:	cd b7       	in	r28, 0x3d	; 61
 d34:	de b7       	in	r29, 0x3e	; 62
 d36:	ca 1b       	sub	r28, r26
 d38:	db 0b       	sbc	r29, r27
 d3a:	0f b6       	in	r0, 0x3f	; 63
 d3c:	f8 94       	cli
 d3e:	de bf       	out	0x3e, r29	; 62
 d40:	0f be       	out	0x3f, r0	; 63
 d42:	cd bf       	out	0x3d, r28	; 61
 d44:	09 94       	ijmp

00000d46 <__epilogue_restores__>:
 d46:	2a 88       	ldd	r2, Y+18	; 0x12
 d48:	39 88       	ldd	r3, Y+17	; 0x11
 d4a:	48 88       	ldd	r4, Y+16	; 0x10
 d4c:	5f 84       	ldd	r5, Y+15	; 0x0f
 d4e:	6e 84       	ldd	r6, Y+14	; 0x0e
 d50:	7d 84       	ldd	r7, Y+13	; 0x0d
 d52:	8c 84       	ldd	r8, Y+12	; 0x0c
 d54:	9b 84       	ldd	r9, Y+11	; 0x0b
 d56:	aa 84       	ldd	r10, Y+10	; 0x0a
 d58:	b9 84       	ldd	r11, Y+9	; 0x09
 d5a:	c8 84       	ldd	r12, Y+8	; 0x08
 d5c:	df 80       	ldd	r13, Y+7	; 0x07
 d5e:	ee 80       	ldd	r14, Y+6	; 0x06
 d60:	fd 80       	ldd	r15, Y+5	; 0x05
 d62:	0c 81       	ldd	r16, Y+4	; 0x04
 d64:	1b 81       	ldd	r17, Y+3	; 0x03
 d66:	aa 81       	ldd	r26, Y+2	; 0x02
 d68:	b9 81       	ldd	r27, Y+1	; 0x01
 d6a:	ce 0f       	add	r28, r30
 d6c:	d1 1d       	adc	r29, r1
 d6e:	0f b6       	in	r0, 0x3f	; 63
 d70:	f8 94       	cli
 d72:	de bf       	out	0x3e, r29	; 62
 d74:	0f be       	out	0x3f, r0	; 63
 d76:	cd bf       	out	0x3d, r28	; 61
 d78:	ed 01       	movw	r28, r26
 d7a:	08 95       	ret

00000d7c <_exit>:
 d7c:	f8 94       	cli

00000d7e <__stop_program>:
 d7e:	ff cf       	rjmp	.-2      	; 0xd7e <__stop_program>
