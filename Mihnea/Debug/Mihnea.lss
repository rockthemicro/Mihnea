
Mihnea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  00001736  000017aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001736  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000168c  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c5f  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba4  00000000  00000000  00003daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  00004954  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000066d  00000000  00000000  00004d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c7e  00000000  00000000  000053f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0000606f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_5>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	07 63       	ori	r16, 0x37	; 55
      7e:	42 36       	cpi	r20, 0x62	; 98
      80:	b7 9b       	sbis	0x16, 7	; 22
      82:	d8 a7       	std	Y+40, r29	; 0x28
      84:	1a 39       	cpi	r17, 0x9A	; 154
      86:	68 56       	subi	r22, 0x68	; 104
      88:	18 ae       	std	Y+56, r1	; 0x38
      8a:	ba ab       	std	Y+50, r27	; 0x32
      8c:	55 8c       	ldd	r5, Z+29	; 0x1d
      8e:	1d 3c       	cpi	r17, 0xCD	; 205
      90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
      92:	57 63       	ori	r21, 0x37	; 55
      94:	bd 6d       	ori	r27, 0xDD	; 221
      96:	ed fd       	.word	0xfded	; ????
      98:	75 3e       	cpi	r23, 0xE5	; 229
      9a:	f6 17       	cp	r31, r22
      9c:	72 31       	cpi	r23, 0x12	; 18
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <main+0x3a>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
	...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d4 e0       	ldi	r29, 0x04	; 4
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	12 e0       	ldi	r17, 0x02	; 2
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e6 e3       	ldi	r30, 0x36	; 54
     112:	f7 e1       	ldi	r31, 0x17	; 23
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a4 31       	cpi	r26, 0x14	; 20
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>
     120:	0e 94 5f 04 	call	0x8be	; 0x8be <main>
     124:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <LCD_read>:
{
    /* TODO task 1 LCD */

    LCD_writeInstr(LCD_INSTR_DDRAM + addr);
    LCD_putChar(c);
}
     12c:	7f 92       	push	r7
     12e:	8f 92       	push	r8
     130:	9f 92       	push	r9
     132:	af 92       	push	r10
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	27 b1       	in	r18, 0x07	; 7
     148:	27 78       	andi	r18, 0x87	; 135
     14a:	27 b9       	out	0x07, r18	; 7
     14c:	28 b1       	in	r18, 0x08	; 8
     14e:	27 78       	andi	r18, 0x87	; 135
     150:	28 b9       	out	0x08, r18	; 8
     152:	17 9a       	sbi	0x02, 7	; 2
     154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_read+0x2a>
     156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_read+0x2c>
     158:	26 b1       	in	r18, 0x06	; 6
     15a:	b6 b1       	in	r27, 0x06	; 6
     15c:	a6 b1       	in	r26, 0x06	; 6
     15e:	76 b0       	in	r7, 0x06	; 6
     160:	17 98       	cbi	0x02, 7	; 2
     162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_read+0x38>
     164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_read+0x3a>
     166:	17 9a       	sbi	0x02, 7	; 2
     168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_read+0x3e>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_read+0x40>
     16c:	86 b0       	in	r8, 0x06	; 6
     16e:	96 b0       	in	r9, 0x06	; 6
     170:	b6 b0       	in	r11, 0x06	; 6
     172:	a6 b0       	in	r10, 0x06	; 6
     174:	17 98       	cbi	0x02, 7	; 2
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_read+0x4c>
     178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_read+0x4e>
     17a:	37 b1       	in	r19, 0x07	; 7
     17c:	38 67       	ori	r19, 0x78	; 120
     17e:	37 b9       	out	0x07, r19	; 7
     180:	26 95       	lsr	r18
     182:	26 95       	lsr	r18
     184:	26 95       	lsr	r18
     186:	80 e8       	ldi	r24, 0x80	; 128
     188:	28 9f       	mul	r18, r24
     18a:	e0 01       	movw	r28, r0
     18c:	11 24       	eor	r1, r1
     18e:	9e 01       	movw	r18, r28
     190:	33 27       	eor	r19, r19
     192:	b4 fb       	bst	r27, 4
     194:	88 27       	eor	r24, r24
     196:	80 f9       	bld	r24, 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	00 24       	eor	r0, r0
     19c:	96 95       	lsr	r25
     19e:	87 95       	ror	r24
     1a0:	07 94       	ror	r0
     1a2:	96 95       	lsr	r25
     1a4:	87 95       	ror	r24
     1a6:	07 94       	ror	r0
     1a8:	98 2f       	mov	r25, r24
     1aa:	80 2d       	mov	r24, r0
     1ac:	82 2b       	or	r24, r18
     1ae:	93 2b       	or	r25, r19
     1b0:	a5 fb       	bst	r26, 5
     1b2:	ee 24       	eor	r14, r14
     1b4:	e0 f8       	bld	r14, 0
     1b6:	f1 2c       	mov	r15, r1
     1b8:	d7 01       	movw	r26, r14
     1ba:	aa 0f       	add	r26, r26
     1bc:	bb 1f       	adc	r27, r27
     1be:	a2 95       	swap	r26
     1c0:	b2 95       	swap	r27
     1c2:	b0 7f       	andi	r27, 0xF0	; 240
     1c4:	ba 27       	eor	r27, r26
     1c6:	a0 7f       	andi	r26, 0xF0	; 240
     1c8:	ba 27       	eor	r27, r26
     1ca:	a8 2b       	or	r26, r24
     1cc:	b9 2b       	or	r27, r25
     1ce:	76 fa       	bst	r7, 6
     1d0:	00 27       	eor	r16, r16
     1d2:	00 f9       	bld	r16, 0
     1d4:	10 e0       	ldi	r17, 0x00	; 0
     1d6:	c8 01       	movw	r24, r16
     1d8:	82 95       	swap	r24
     1da:	92 95       	swap	r25
     1dc:	90 7f       	andi	r25, 0xF0	; 240
     1de:	98 27       	eor	r25, r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
     1e2:	98 27       	eor	r25, r24
     1e4:	8a 2b       	or	r24, r26
     1e6:	9b 2b       	or	r25, r27
     1e8:	83 fa       	bst	r8, 3
     1ea:	cc 24       	eor	r12, r12
     1ec:	c0 f8       	bld	r12, 0
     1ee:	d1 2c       	mov	r13, r1
     1f0:	96 01       	movw	r18, r12
     1f2:	22 0f       	add	r18, r18
     1f4:	33 1f       	adc	r19, r19
     1f6:	22 0f       	add	r18, r18
     1f8:	33 1f       	adc	r19, r19
     1fa:	22 0f       	add	r18, r18
     1fc:	33 1f       	adc	r19, r19
     1fe:	94 fa       	bst	r9, 4
     200:	ee 27       	eor	r30, r30
     202:	e0 f9       	bld	r30, 0
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	ee 0f       	add	r30, r30
     20c:	ff 1f       	adc	r31, r31
     20e:	2e 2b       	or	r18, r30
     210:	3f 2b       	or	r19, r31
     212:	a6 fa       	bst	r10, 6
     214:	44 27       	eor	r20, r20
     216:	40 f9       	bld	r20, 0
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	42 2b       	or	r20, r18
     21c:	53 2b       	or	r21, r19
     21e:	b5 fa       	bst	r11, 5
     220:	66 27       	eor	r22, r22
     222:	60 f9       	bld	r22, 0
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	66 0f       	add	r22, r22
     228:	77 1f       	adc	r23, r23
     22a:	46 2b       	or	r20, r22
     22c:	57 2b       	or	r21, r23
     22e:	84 2b       	or	r24, r20
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	ff 90       	pop	r15
     23a:	ef 90       	pop	r14
     23c:	df 90       	pop	r13
     23e:	cf 90       	pop	r12
     240:	bf 90       	pop	r11
     242:	af 90       	pop	r10
     244:	9f 90       	pop	r9
     246:	8f 90       	pop	r8
     248:	7f 90       	pop	r7
     24a:	08 95       	ret

0000024c <LCD_readStatus>:
     24c:	15 98       	cbi	0x02, 5	; 2
     24e:	16 9a       	sbi	0x02, 6	; 2
     250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_readStatus+0x6>
     252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_readStatus+0x8>
     254:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_read>
     258:	08 95       	ret

0000025a <LCD_isBusy>:
     25a:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_readStatus>
     25e:	88 1f       	adc	r24, r24
     260:	88 27       	eor	r24, r24
     262:	88 1f       	adc	r24, r24
     264:	08 95       	ret

00000266 <LCD_waitNotBusy>:
     266:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_isBusy>
     26a:	81 11       	cpse	r24, r1
     26c:	fc cf       	rjmp	.-8      	; 0x266 <LCD_waitNotBusy>
     26e:	08 95       	ret

00000270 <LCD_write>:
     270:	cf 93       	push	r28
     272:	17 9a       	sbi	0x02, 7	; 2
     274:	98 b1       	in	r25, 0x08	; 8
     276:	c8 2f       	mov	r28, r24
     278:	cc 1f       	adc	r28, r28
     27a:	cc 27       	eor	r28, r28
     27c:	cc 1f       	adc	r28, r28
     27e:	cc 0f       	add	r28, r28
     280:	cc 0f       	add	r28, r28
     282:	cc 0f       	add	r28, r28
     284:	97 78       	andi	r25, 0x87	; 135
     286:	9c 2b       	or	r25, r28
     288:	86 fb       	bst	r24, 6
     28a:	44 27       	eor	r20, r20
     28c:	40 f9       	bld	r20, 0
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	42 95       	swap	r20
     292:	52 95       	swap	r21
     294:	50 7f       	andi	r21, 0xF0	; 240
     296:	54 27       	eor	r21, r20
     298:	40 7f       	andi	r20, 0xF0	; 240
     29a:	54 27       	eor	r21, r20
     29c:	49 2b       	or	r20, r25
     29e:	98 2f       	mov	r25, r24
     2a0:	90 72       	andi	r25, 0x20	; 32
     2a2:	49 2b       	or	r20, r25
     2a4:	84 fb       	bst	r24, 4
     2a6:	aa 27       	eor	r26, r26
     2a8:	a0 f9       	bld	r26, 0
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	00 24       	eor	r0, r0
     2ae:	b6 95       	lsr	r27
     2b0:	a7 95       	ror	r26
     2b2:	07 94       	ror	r0
     2b4:	b6 95       	lsr	r27
     2b6:	a7 95       	ror	r26
     2b8:	07 94       	ror	r0
     2ba:	ba 2f       	mov	r27, r26
     2bc:	a0 2d       	mov	r26, r0
     2be:	a4 2b       	or	r26, r20
     2c0:	a8 b9       	out	0x08, r26	; 8
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_write+0x54>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_write+0x56>
     2c6:	17 98       	cbi	0x02, 7	; 2
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_write+0x5a>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_write+0x5c>
     2cc:	17 9a       	sbi	0x02, 7	; 2
     2ce:	98 b1       	in	r25, 0x08	; 8
     2d0:	28 2f       	mov	r18, r24
     2d2:	21 70       	andi	r18, 0x01	; 1
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	00 24       	eor	r0, r0
     2d8:	36 95       	lsr	r19
     2da:	27 95       	ror	r18
     2dc:	07 94       	ror	r0
     2de:	36 95       	lsr	r19
     2e0:	27 95       	ror	r18
     2e2:	07 94       	ror	r0
     2e4:	32 2f       	mov	r19, r18
     2e6:	20 2d       	mov	r18, r0
     2e8:	97 78       	andi	r25, 0x87	; 135
     2ea:	29 2b       	or	r18, r25
     2ec:	98 2f       	mov	r25, r24
     2ee:	98 70       	andi	r25, 0x08	; 8
     2f0:	29 2b       	or	r18, r25
     2f2:	82 fb       	bst	r24, 2
     2f4:	ee 27       	eor	r30, r30
     2f6:	e0 f9       	bld	r30, 0
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	e2 95       	swap	r30
     2fc:	f2 95       	swap	r31
     2fe:	f0 7f       	andi	r31, 0xF0	; 240
     300:	fe 27       	eor	r31, r30
     302:	e0 7f       	andi	r30, 0xF0	; 240
     304:	fe 27       	eor	r31, r30
     306:	e2 2b       	or	r30, r18
     308:	81 fb       	bst	r24, 1
     30a:	66 27       	eor	r22, r22
     30c:	60 f9       	bld	r22, 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	66 0f       	add	r22, r22
     312:	77 1f       	adc	r23, r23
     314:	62 95       	swap	r22
     316:	72 95       	swap	r23
     318:	70 7f       	andi	r23, 0xF0	; 240
     31a:	76 27       	eor	r23, r22
     31c:	60 7f       	andi	r22, 0xF0	; 240
     31e:	76 27       	eor	r23, r22
     320:	6e 2b       	or	r22, r30
     322:	68 b9       	out	0x08, r22	; 8
     324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_write+0xb6>
     326:	00 c0       	rjmp	.+0      	; 0x328 <LCD_write+0xb8>
     328:	17 98       	cbi	0x02, 7	; 2
     32a:	00 c0       	rjmp	.+0      	; 0x32c <LCD_write+0xbc>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_write+0xbe>
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <LCD_writeInstr>:
     332:	cf 93       	push	r28
     334:	c8 2f       	mov	r28, r24
     336:	0e 94 33 01 	call	0x266	; 0x266 <LCD_waitNotBusy>
     33a:	15 98       	cbi	0x02, 5	; 2
     33c:	16 98       	cbi	0x02, 6	; 2
     33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_writeInstr+0xe>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_writeInstr+0x10>
     342:	8c 2f       	mov	r24, r28
     344:	0e 94 38 01 	call	0x270	; 0x270 <LCD_write>
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <LCD_init>:
     34c:	87 b1       	in	r24, 0x07	; 7
     34e:	88 67       	ori	r24, 0x78	; 120
     350:	87 b9       	out	0x07, r24	; 7
     352:	81 b1       	in	r24, 0x01	; 1
     354:	80 6e       	ori	r24, 0xE0	; 224
     356:	81 b9       	out	0x01, r24	; 1
     358:	15 98       	cbi	0x02, 5	; 2
     35a:	16 98       	cbi	0x02, 6	; 2
     35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_init+0x12>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_init+0x14>
     360:	17 9a       	sbi	0x02, 7	; 2
     362:	88 b1       	in	r24, 0x08	; 8
     364:	87 78       	andi	r24, 0x87	; 135
     366:	80 62       	ori	r24, 0x20	; 32
     368:	88 b9       	out	0x08, r24	; 8
     36a:	00 c0       	rjmp	.+0      	; 0x36c <LCD_init+0x20>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_init+0x22>
     36e:	17 98       	cbi	0x02, 7	; 2
     370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_init+0x26>
     372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_init+0x28>
     374:	88 e2       	ldi	r24, 0x28	; 40
     376:	0e 94 99 01 	call	0x332	; 0x332 <LCD_writeInstr>
     37a:	8f e0       	ldi	r24, 0x0F	; 15
     37c:	0e 94 99 01 	call	0x332	; 0x332 <LCD_writeInstr>
     380:	86 e0       	ldi	r24, 0x06	; 6
     382:	0e 94 99 01 	call	0x332	; 0x332 <LCD_writeInstr>
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	0e 94 99 01 	call	0x332	; 0x332 <LCD_writeInstr>
     38c:	08 95       	ret

0000038e <LCD_writeData>:
     38e:	cf 93       	push	r28
     390:	c8 2f       	mov	r28, r24
     392:	0e 94 33 01 	call	0x266	; 0x266 <LCD_waitNotBusy>
     396:	15 9a       	sbi	0x02, 5	; 2
     398:	16 98       	cbi	0x02, 6	; 2
     39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_writeData+0xe>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <LCD_writeData+0x10>
     39e:	8c 2f       	mov	r24, r28
     3a0:	0e 94 38 01 	call	0x270	; 0x270 <LCD_write>
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <LCD_print>:

// Afiseaza string-ul pe LCD incepand de la adresa curenta.
void LCD_print(const char* msg)
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
    while(*msg)
     3ae:	88 81       	ld	r24, Y
     3b0:	88 23       	and	r24, r24
     3b2:	31 f0       	breq	.+12     	; 0x3c0 <LCD_print+0x18>
     3b4:	21 96       	adiw	r28, 0x01	; 1
}

// Afiseaza caracterul pe LCD la adresa curenta.
void LCD_putChar(char c)
{
    LCD_writeData(c);
     3b6:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_writeData>
}

// Afiseaza string-ul pe LCD incepand de la adresa curenta.
void LCD_print(const char* msg)
{
    while(*msg)
     3ba:	89 91       	ld	r24, Y+
     3bc:	81 11       	cpse	r24, r1
     3be:	fb cf       	rjmp	.-10     	; 0x3b6 <LCD_print+0xe>
        LCD_putChar(*msg++);
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <LCD_printAt>:

// Afiseaza string-ul pe LCD incepand de la adresa primita.
void LCD_printAt(uint8_t addr, const char* msg)
{
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	eb 01       	movw	r28, r22
    /* TODO task 1 LCD */

    LCD_writeInstr(LCD_INSTR_DDRAM | addr);
     3cc:	80 68       	ori	r24, 0x80	; 128
     3ce:	0e 94 99 01 	call	0x332	; 0x332 <LCD_writeInstr>
    LCD_print(msg);
     3d2:	ce 01       	movw	r24, r28
     3d4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_print>
}
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <LCD_clear_top_line>:

// Sterge linia de sus a LCD-ului
void LCD_clear_top_line()
{
	LCD_printAt(0x00, "                ");
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	71 e0       	ldi	r23, 0x01	; 1
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_printAt>
     3e8:	08 95       	ret

000003ea <LCD_clear_bottom_line>:
}

// Sterge linia de jos a LCD-ului
void LCD_clear_bottom_line()
{
	LCD_printAt(0x40, "                ");
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	71 e0       	ldi	r23, 0x01	; 1
     3ee:	80 e4       	ldi	r24, 0x40	; 64
     3f0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_printAt>
     3f4:	08 95       	ret

000003f6 <adc_init>:
#define LIGHT_SENSOR	2
#define HUMI_SENSOR		4

void adc_init()
{
	ADMUX = 0;
     3f6:	ec e7       	ldi	r30, 0x7C	; 124
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	10 82       	st	Z, r1

	/* selectare canal 1 (conform tabelului 23-4) */
	ADMUX |= (1<<MUX0);
     3fc:	80 81       	ld	r24, Z
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	80 83       	st	Z, r24

	/* referinta la AVCC (tensiunea de alimentare) */
	ADMUX |= (1<<REFS0);
     402:	80 81       	ld	r24, Z
     404:	80 64       	ori	r24, 0x40	; 64
     406:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     408:	80 81       	ld	r24, Z
     40a:	8f 77       	andi	r24, 0x7F	; 127
     40c:	80 83       	st	Z, r24

	/* ajustare rezultat la dreapta; bitii 0:7 in ADCL, 8:9 in ADCH */
	ADMUX &= ~(1<<ADLAR);
     40e:	80 81       	ld	r24, Z
     410:	8f 7d       	andi	r24, 0xDF	; 223
     412:	80 83       	st	Z, r24

	ADCSRA = 0;
     414:	ea e7       	ldi	r30, 0x7A	; 122
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	10 82       	st	Z, r1

	/* enable convertor */
	ADCSRA |= (1<<ADEN);
     41a:	80 81       	ld	r24, Z
     41c:	80 68       	ori	r24, 0x80	; 128
     41e:	80 83       	st	Z, r24
     420:	08 95       	ret

00000422 <adc_select_sensor>:
}

void adc_select_sensor(unsigned int sensor_number)
{
	/* curatam bitii de selectare a portului */
	ADMUX &= ~(1<<MUX0);
     422:	ec e7       	ldi	r30, 0x7C	; 124
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	20 81       	ld	r18, Z
     428:	2e 7f       	andi	r18, 0xFE	; 254
     42a:	20 83       	st	Z, r18
	ADMUX &= ~(1<<MUX1);
     42c:	20 81       	ld	r18, Z
     42e:	2d 7f       	andi	r18, 0xFD	; 253
     430:	20 83       	st	Z, r18
	ADMUX &= ~(1<<MUX2);
     432:	20 81       	ld	r18, Z
     434:	2b 7f       	andi	r18, 0xFB	; 251
     436:	20 83       	st	Z, r18
	
	/* ne asiguram ca nu afectam ceilalti biti prin pastrarea maxim a primilor 3 biti */
	sensor_number = sensor_number & 0x3;
	
	/* punem pe 1 bitii lui ADMUX care sunt pe 1 in sensor_number */
	ADMUX |= sensor_number;
     438:	20 81       	ld	r18, Z
     43a:	83 70       	andi	r24, 0x03	; 3
     43c:	99 27       	eor	r25, r25
     43e:	82 2b       	or	r24, r18
     440:	80 83       	st	Z, r24
     442:	08 95       	ret

00000444 <adc_start_conversion>:
}

void adc_start_conversion()
{	
	ADCSRA |= (1<<ADSC);
     444:	ea e7       	ldi	r30, 0x7A	; 122
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	80 64       	ori	r24, 0x40	; 64
     44c:	80 83       	st	Z, r24
     44e:	08 95       	ret

00000450 <adc_get_value>:
 * Vin este dat de senzor
 */
unsigned int adc_get_value()
{
	/* asteptam finalizarea conversiei */
	while ((ADCSRA & (1<<ADIF)) == 0) {};
     450:	ea e7       	ldi	r30, 0x7A	; 122
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	84 ff       	sbrs	r24, 4
     458:	fd cf       	rjmp	.-6      	; 0x454 <adc_get_value+0x4>

	/*
	 * conversia e gata, obtine rezultatul; value este in [0; 1024) probabil
	 */
	unsigned int value = ADC;
     45a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     45e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	return value;	
}
     462:	08 95       	ret

00000464 <adc_full_read_temperature>:

double adc_full_read_temperature()
{
	adc_select_sensor(TEMP_SENSOR);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 11 02 	call	0x422	; 0x422 <adc_select_sensor>
	adc_start_conversion();
     46c:	0e 94 22 02 	call	0x444	; 0x444 <adc_start_conversion>
	double value = (double) adc_get_value();
     470:	0e 94 28 02 	call	0x450	; 0x450 <adc_get_value>
	double Vin = (value * 5000.0) / 1024.0;
	
	/* formula obtinuta din documentatia senzorului */
	double temperature = (Vin - 500.0) / 10.0;
	
	return temperature;
     474:	bc 01       	movw	r22, r24
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__floatunsisf>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e4       	ldi	r19, 0x40	; 64
     482:	4c e9       	ldi	r20, 0x9C	; 156
     484:	55 e4       	ldi	r21, 0x45	; 69
     486:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3>
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e8       	ldi	r20, 0x80	; 128
     490:	5a e3       	ldi	r21, 0x3A	; 58
     492:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	4a ef       	ldi	r20, 0xFA	; 250
     49c:	53 e4       	ldi	r21, 0x43	; 67
     49e:	0e 94 18 05 	call	0xa30	; 0xa30 <__subsf3>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e2       	ldi	r20, 0x20	; 32
     4a8:	51 e4       	ldi	r21, 0x41	; 65
     4aa:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divsf3>
}
     4ae:	08 95       	ret

000004b0 <adc_full_read_light>:

/* http://www.esp32learning.com/code/esp32-and-ga1a12s202-light-sensor-example.php tabel cu valori lux
 */
double adc_full_read_light()
{
	adc_select_sensor(LIGHT_SENSOR);
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 11 02 	call	0x422	; 0x422 <adc_select_sensor>
	adc_start_conversion();
     4b8:	0e 94 22 02 	call	0x444	; 0x444 <adc_start_conversion>
	/* iesirea senzorului este in scara logaritmica */
	double value = (double) adc_get_value();
     4bc:	0e 94 28 02 	call	0x450	; 0x450 <adc_get_value>
	 * acel procentaj il inmultim cu exponentul maxim al logaritmului, adica cu logRange
	 */
	double logLux = (value * logRange) / rawRange;
	
	/* numarul de lux; maxim 50.000 */
	double lux = pow(10, logLux);
     4c0:	bc 01       	movw	r22, r24
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 26 06 	call	0xc4c	; 0xc4c <__floatunsisf>
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 ea       	ldi	r20, 0xA0	; 160
     4d0:	50 e4       	ldi	r21, 0x40	; 64
     4d2:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e8       	ldi	r20, 0x80	; 128
     4dc:	5a e3       	ldi	r21, 0x3A	; 58
     4de:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3>
     4e2:	9b 01       	movw	r18, r22
     4e4:	ac 01       	movw	r20, r24
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 e2       	ldi	r24, 0x20	; 32
     4ec:	91 e4       	ldi	r25, 0x41	; 65
     4ee:	0e 94 21 07 	call	0xe42	; 0xe42 <pow>
	
	return lux;
}
     4f2:	08 95       	ret

000004f4 <adc_full_read_humidity>:

double adc_full_read_humidity()
{
	adc_select_sensor(HUMI_SENSOR);
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 11 02 	call	0x422	; 0x422 <adc_select_sensor>
	adc_start_conversion();
     4fc:	0e 94 22 02 	call	0x444	; 0x444 <adc_start_conversion>
	double value = (double) adc_get_value();
     500:	0e 94 28 02 	call	0x450	; 0x450 <adc_get_value>

	/* pur si simplu exprimam umiditatea ca procentaj din maximul posibil dat de senzor */
	return (value * 100) / 1024.0;
     504:	bc 01       	movw	r22, r24
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__floatunsisf>
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	48 ec       	ldi	r20, 0xC8	; 200
     514:	52 e4       	ldi	r21, 0x42	; 66
     516:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e8       	ldi	r20, 0x80	; 128
     520:	5a e3       	ldi	r21, 0x3A	; 58
     522:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3>
     526:	08 95       	ret

00000528 <shift_left>:

void shift_left(char *v, int first, int last)
{
	int i;
	
	for (i = 0; i < last - 1; i++) {
     528:	9a 01       	movw	r18, r20
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	31 09       	sbc	r19, r1
     52e:	12 16       	cp	r1, r18
     530:	13 06       	cpc	r1, r19
     532:	4c f4       	brge	.+18     	; 0x546 <shift_left+0x1e>
     534:	fc 01       	movw	r30, r24
     536:	a9 01       	movw	r20, r18
     538:	48 0f       	add	r20, r24
     53a:	59 1f       	adc	r21, r25
		v[i] = v[i + 1];
     53c:	91 81       	ldd	r25, Z+1	; 0x01
     53e:	91 93       	st	Z+, r25

void shift_left(char *v, int first, int last)
{
	int i;
	
	for (i = 0; i < last - 1; i++) {
     540:	e4 17       	cp	r30, r20
     542:	f5 07       	cpc	r31, r21
     544:	d9 f7       	brne	.-10     	; 0x53c <shift_left+0x14>
     546:	08 95       	ret

00000548 <read_until_ok>:
	}
}

/* folosit pana la orice citire de OK\r\n */
int read_until_ok()
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	00 d0       	rcall	.+0      	; 0x552 <read_until_ok+0xa>
     552:	00 d0       	rcall	.+0      	; 0x554 <read_until_ok+0xc>
     554:	1f 92       	push	r1
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	char v[5] = "";
     55a:	1a 82       	std	Y+2, r1	; 0x02
     55c:	19 82       	std	Y+1, r1	; 0x01
     55e:	fe 01       	movw	r30, r28
     560:	33 96       	adiw	r30, 0x03	; 3
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	df 01       	movw	r26, r30
     566:	1d 92       	st	X+, r1
     568:	8a 95       	dec	r24
     56a:	e9 f7       	brne	.-6      	; 0x566 <read_until_ok+0x1e>
	int cnt = 0;
     56c:	00 e0       	ldi	r16, 0x00	; 0
     56e:	10 e0       	ldi	r17, 0x00	; 0
	 * daca am obtinut sirul, ma opresc
	 * daca nu am obtinut sirul, shiftez la stanga toate caracterele cu o pozitie
	 * _ _ _ O -> _ _ O K -> _ O K \r -> O K \r \n
	 */
	while (true) {
		v[3] = USART0_receive();
     570:	0e 94 01 05 	call	0xa02	; 0xa02 <USART0_receive>
     574:	8c 83       	std	Y+4, r24	; 0x04
		cnt++;
     576:	0f 5f       	subi	r16, 0xFF	; 255
     578:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if (strcmp(v, "OK\r\n") == 0)
     57a:	61 e1       	ldi	r22, 0x11	; 17
     57c:	71 e0       	ldi	r23, 0x01	; 1
     57e:	ce 01       	movw	r24, r28
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	0e 94 a6 08 	call	0x114c	; 0x114c <strcmp>
     586:	89 2b       	or	r24, r25
     588:	49 f0       	breq	.+18     	; 0x59c <read_until_ok+0x54>
			return cnt;
		
		shift_left(v, 0, 4);
     58a:	44 e0       	ldi	r20, 0x04	; 4
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	ce 01       	movw	r24, r28
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	0e 94 94 02 	call	0x528	; 0x528 <shift_left>
	}
     59a:	ea cf       	rjmp	.-44     	; 0x570 <read_until_ok+0x28>
	
	return 0;
}
     59c:	c8 01       	movw	r24, r16
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	08 95       	ret

000005b2 <generic_read_until>:


int generic_read_until(const char *word)
{
     5b2:	af 92       	push	r10
     5b4:	bf 92       	push	r11
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	60 97       	sbiw	r28, 0x10	; 16
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	6c 01       	movw	r12, r24
	char v[16] = "";
     5d8:	1a 82       	std	Y+2, r1	; 0x02
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	fe 01       	movw	r30, r28
     5de:	33 96       	adiw	r30, 0x03	; 3
     5e0:	8e e0       	ldi	r24, 0x0E	; 14
     5e2:	df 01       	movw	r26, r30
     5e4:	1d 92       	st	X+, r1
     5e6:	8a 95       	dec	r24
     5e8:	e9 f7       	brne	.-6      	; 0x5e4 <generic_read_until+0x32>
	int cnt = 0;
	unsigned int world_len = strlen(word);
     5ea:	f6 01       	movw	r30, r12
     5ec:	01 90       	ld	r0, Z+
     5ee:	00 20       	and	r0, r0
     5f0:	e9 f7       	brne	.-6      	; 0x5ec <generic_read_until+0x3a>
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	7f 01       	movw	r14, r30
     5f6:	ec 18       	sub	r14, r12
     5f8:	fd 08       	sbc	r15, r13
	
	v[15] = '\0';
     5fa:	18 8a       	std	Y+16, r1	; 0x10
	
	if (world_len >= 16) {
     5fc:	b0 e1       	ldi	r27, 0x10	; 16
     5fe:	eb 16       	cp	r14, r27
     600:	f1 04       	cpc	r15, r1
     602:	50 f0       	brcs	.+20     	; 0x618 <generic_read_until+0x66>
		LCD_printAt(0, "NASOL!");
     604:	66 e1       	ldi	r22, 0x16	; 22
     606:	71 e0       	ldi	r23, 0x01	; 1
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_printAt>
		LCD_printAt(64, "NASOL!");
     60e:	66 e1       	ldi	r22, 0x16	; 22
     610:	71 e0       	ldi	r23, 0x01	; 1
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_printAt>
	return 0;
}


int generic_read_until(const char *word)
{
     618:	00 e0       	ldi	r16, 0x00	; 0
     61a:	10 e0       	ldi	r17, 0x00	; 0
		LCD_printAt(0, "NASOL!");
		LCD_printAt(64, "NASOL!");
	}
	
	while (1) {
		v[world_len - 1] = USART0_receive();
     61c:	5e 01       	movw	r10, r28
     61e:	ae 0c       	add	r10, r14
     620:	bf 1c       	adc	r11, r15
     622:	0e 94 01 05 	call	0xa02	; 0xa02 <USART0_receive>
     626:	f5 01       	movw	r30, r10
     628:	80 83       	st	Z, r24
		cnt++;
     62a:	0f 5f       	subi	r16, 0xFF	; 255
     62c:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if (strcmp(v, word) == 0)
     62e:	b6 01       	movw	r22, r12
     630:	ce 01       	movw	r24, r28
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	0e 94 a6 08 	call	0x114c	; 0x114c <strcmp>
     638:	89 2b       	or	r24, r25
     63a:	41 f0       	breq	.+16     	; 0x64c <generic_read_until+0x9a>
			return cnt;
		
		shift_left(v, 0, world_len);
     63c:	a7 01       	movw	r20, r14
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	0e 94 94 02 	call	0x528	; 0x528 <shift_left>
	}
     64a:	eb cf       	rjmp	.-42     	; 0x622 <generic_read_until+0x70>
	
	return 0;
}
     64c:	c8 01       	movw	r24, r16
     64e:	60 96       	adiw	r28, 0x10	; 16
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	08 95       	ret

00000670 <read_until_2crlf>:
/*
 * folosit pana la citirea \r\n\r\n, pentru citirea completa a
 * requesturilor http GET
 */
int read_until_2crlf()
{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	00 d0       	rcall	.+0      	; 0x67a <read_until_2crlf+0xa>
     67a:	00 d0       	rcall	.+0      	; 0x67c <read_until_2crlf+0xc>
     67c:	1f 92       	push	r1
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
	char v[5] = "";
     682:	1a 82       	std	Y+2, r1	; 0x02
     684:	19 82       	std	Y+1, r1	; 0x01
     686:	fe 01       	movw	r30, r28
     688:	33 96       	adiw	r30, 0x03	; 3
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	df 01       	movw	r26, r30
     68e:	1d 92       	st	X+, r1
     690:	8a 95       	dec	r24
     692:	e9 f7       	brne	.-6      	; 0x68e <read_until_2crlf+0x1e>
	int cnt = 0;
     694:	00 e0       	ldi	r16, 0x00	; 0
     696:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1) {
		v[3] = USART0_receive();
     698:	0e 94 01 05 	call	0xa02	; 0xa02 <USART0_receive>
     69c:	8c 83       	std	Y+4, r24	; 0x04
		cnt++;
     69e:	0f 5f       	subi	r16, 0xFF	; 255
     6a0:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if (strcmp(v, "\r\n\r\n") == 0)
     6a2:	6c e6       	ldi	r22, 0x6C	; 108
     6a4:	71 e0       	ldi	r23, 0x01	; 1
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	0e 94 a6 08 	call	0x114c	; 0x114c <strcmp>
     6ae:	89 2b       	or	r24, r25
     6b0:	49 f0       	breq	.+18     	; 0x6c4 <read_until_2crlf+0x54>
		return cnt;
		
		shift_left(v, 0, 4);
     6b2:	44 e0       	ldi	r20, 0x04	; 4
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 94 02 	call	0x528	; 0x528 <shift_left>
	}
     6c2:	ea cf       	rjmp	.-44     	; 0x698 <read_until_2crlf+0x28>
	
	return 0;	
}
     6c4:	c8 01       	movw	r24, r16
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <send_request>:

void send_request(unsigned int grade, unsigned int lux, unsigned int umiditate)
{
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	c0 52       	subi	r28, 0x20	; 32
     6ec:	d1 40       	sbci	r29, 0x01	; 1
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
	char buf[256];
	char sendBuf[32];
	sprintf(buf, "GET /api/sendData?temp=%u&light=%u&earthHum=%u HTTP/1.1\r\nHost: 192.168.4.3:8080\r\n\r\n", grade, lux, umiditate);
     6f8:	5f 93       	push	r21
     6fa:	4f 93       	push	r20
     6fc:	7f 93       	push	r23
     6fe:	6f 93       	push	r22
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	8d e1       	ldi	r24, 0x1D	; 29
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	9f 93       	push	r25
     70a:	8f 93       	push	r24
     70c:	8e 01       	movw	r16, r28
     70e:	0f 5f       	subi	r16, 0xFF	; 255
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	1f 93       	push	r17
     714:	0f 93       	push	r16
     716:	0e 94 af 08 	call	0x115e	; 0x115e <sprintf>
	
	/* initializarea unei noi conexiuni cu serverul de SpringBoot */
	USART0_print("AT+CIPSTART=0,\"TCP\",\"192.168.4.3\",8080\r\n");
     71a:	81 e7       	ldi	r24, 0x71	; 113
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 09 05 	call	0xa12	; 0xa12 <USART0_print>
	read_until_ok();
     722:	0e 94 a4 02 	call	0x548	; 0x548 <read_until_ok>
	
	/* initializeaza trimiterea unui request la serverul de SpringBoot */
	sprintf(sendBuf, "AT+CIPSEND=0,%d\r\n", strlen(buf));
     726:	f8 01       	movw	r30, r16
     728:	01 90       	ld	r0, Z+
     72a:	00 20       	and	r0, r0
     72c:	e9 f7       	brne	.-6      	; 0x728 <send_request+0x4e>
     72e:	31 97       	sbiw	r30, 0x01	; 1
     730:	e0 1b       	sub	r30, r16
     732:	f1 0b       	sbc	r31, r17
     734:	ff 93       	push	r31
     736:	ef 93       	push	r30
     738:	8a e9       	ldi	r24, 0x9A	; 154
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	7e 01       	movw	r14, r28
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	e8 0e       	add	r14, r24
     746:	f8 1e       	adc	r15, r24
     748:	ff 92       	push	r15
     74a:	ef 92       	push	r14
     74c:	0e 94 af 08 	call	0x115e	; 0x115e <sprintf>
	USART0_print(sendBuf);
     750:	c7 01       	movw	r24, r14
     752:	0e 94 09 05 	call	0xa12	; 0xa12 <USART0_print>
	read_until_ok();
     756:	0e 94 a4 02 	call	0x548	; 0x548 <read_until_ok>
	
	/* trimiterea efectiva a requestului */
	USART0_print(buf);
     75a:	c8 01       	movw	r24, r16
     75c:	0e 94 09 05 	call	0xa12	; 0xa12 <USART0_print>
	/* citim pana la "SEND OK" */
	read_until_ok();
     760:	0e 94 a4 02 	call	0x548	; 0x548 <read_until_ok>
	 */
	
	/* probabil Spring face close de unul singur, deci nu e neaparat nevoie
	 * de CIPCLOSE
	 */
	USART0_print("AT+CIPCLOSE=0\r\n");
     764:	8c ea       	ldi	r24, 0xAC	; 172
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 09 05 	call	0xa12	; 0xa12 <USART0_print>
	read_until_ok();
     76c:	0e 94 a4 02 	call	0x548	; 0x548 <read_until_ok>
}
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	c0 5e       	subi	r28, 0xE0	; 224
     77c:	de 4f       	sbci	r29, 0xFE	; 254
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	08 95       	ret

00000796 <__vector_5>:

void send_request(unsigned int grade, unsigned int lux, unsigned int umiditate);

/* intreruperile intre PCINT8 si PCINT15 */
ISR(PCINT1_vect)
{
     796:	1f 92       	push	r1
     798:	0f 92       	push	r0
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	0f 92       	push	r0
     79e:	11 24       	eor	r1, r1
     7a0:	4f 92       	push	r4
     7a2:	5f 92       	push	r5
     7a4:	6f 92       	push	r6
     7a6:	7f 92       	push	r7
     7a8:	8f 92       	push	r8
     7aa:	9f 92       	push	r9
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	2f 93       	push	r18
     7be:	3f 93       	push	r19
     7c0:	4f 93       	push	r20
     7c2:	5f 93       	push	r21
     7c4:	6f 93       	push	r22
     7c6:	7f 93       	push	r23
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	a0 97       	sbiw	r28, 0x20	; 32
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	cd bf       	out	0x3d, r28	; 61
	/* verificam daca butonul BTN (atasat la PB2) este apasat */
	if ((PINB & (1<<PB2)) == 0) {
     7e2:	1a 99       	sbic	0x03, 2	; 3
     7e4:	45 c0       	rjmp	.+138    	; 0x870 <__vector_5+0xda>
		/* Inversam starea pinului. */
		PORTD ^= (1 << PD7);
     7e6:	8b b1       	in	r24, 0x0b	; 11
     7e8:	80 58       	subi	r24, 0x80	; 128
     7ea:	8b b9       	out	0x0b, r24	; 11
		
		double grade = adc_full_read_temperature();
     7ec:	0e 94 32 02 	call	0x464	; 0x464 <adc_full_read_temperature>
     7f0:	4b 01       	movw	r8, r22
     7f2:	5c 01       	movw	r10, r24
		double lux = adc_full_read_light();
     7f4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_full_read_light>
     7f8:	2b 01       	movw	r4, r22
     7fa:	3c 01       	movw	r6, r24
		double umiditate = adc_full_read_humidity();
     7fc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <adc_full_read_humidity>
     800:	6b 01       	movw	r12, r22
     802:	7c 01       	movw	r14, r24
			
		LCD_clear_bottom_line();
     804:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_clear_bottom_line>
			
		char buf[32];
		sprintf(buf, "%uC %uL %u%%", (unsigned int) grade, (unsigned int) lux, (unsigned int) umiditate);
     808:	c7 01       	movw	r24, r14
     80a:	b6 01       	movw	r22, r12
     80c:	0e 94 f7 05 	call	0xbee	; 0xbee <__fixunssfsi>
     810:	c6 2e       	mov	r12, r22
     812:	d7 2e       	mov	r13, r23
     814:	c3 01       	movw	r24, r6
     816:	b2 01       	movw	r22, r4
     818:	0e 94 f7 05 	call	0xbee	; 0xbee <__fixunssfsi>
     81c:	e6 2e       	mov	r14, r22
     81e:	f7 2e       	mov	r15, r23
     820:	c5 01       	movw	r24, r10
     822:	b4 01       	movw	r22, r8
     824:	0e 94 f7 05 	call	0xbee	; 0xbee <__fixunssfsi>
     828:	06 2f       	mov	r16, r22
     82a:	17 2f       	mov	r17, r23
     82c:	df 92       	push	r13
     82e:	cf 92       	push	r12
     830:	ff 92       	push	r15
     832:	ef 92       	push	r14
     834:	7f 93       	push	r23
     836:	6f 93       	push	r22
     838:	8c eb       	ldi	r24, 0xBC	; 188
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	5c 01       	movw	r10, r24
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 af 08 	call	0x115e	; 0x115e <sprintf>
		LCD_printAt(64, buf);
     84e:	b5 01       	movw	r22, r10
     850:	80 e4       	ldi	r24, 0x40	; 64
     852:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_printAt>
		
		send_request(grade, lux, umiditate);
     856:	4c 2d       	mov	r20, r12
     858:	5d 2d       	mov	r21, r13
     85a:	6e 2d       	mov	r22, r14
     85c:	7f 2d       	mov	r23, r15
     85e:	80 2f       	mov	r24, r16
     860:	91 2f       	mov	r25, r17
     862:	0e 94 6d 03 	call	0x6da	; 0x6da <send_request>
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
	}
}
     870:	a0 96       	adiw	r28, 0x20	; 32
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	9f 90       	pop	r9
     8aa:	8f 90       	pop	r8
     8ac:	7f 90       	pop	r7
     8ae:	6f 90       	pop	r6
     8b0:	5f 90       	pop	r5
     8b2:	4f 90       	pop	r4
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0
     8ba:	1f 90       	pop	r1
     8bc:	18 95       	reti

000008be <main>:
	USART0_print("AT+CIPCLOSE=0\r\n");
	read_until_ok();
}

int main(void)
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	da 95       	dec	r29
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
	/* activate intreruperi globale */
	sei();
     8d2:	78 94       	sei
	
	/* configurarea butonului de la PB2 ca intrare */
	DDRB &= ~(1<<PB2);
     8d4:	22 98       	cbi	0x04, 2	; 4
	/* configurarea rezistentei de pull-up a PB2 */
	PORTB |= (1<<PB2);
     8d6:	2a 9a       	sbi	0x05, 2	; 5
	
	/* activare intreruperi pentru grupul PCINT1: PCINT8-PCINT15 */
	PCICR |= (1<<PCIE1);
     8d8:	e8 e6       	ldi	r30, 0x68	; 104
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	82 60       	ori	r24, 0x02	; 2
     8e0:	80 83       	st	Z, r24
	/* activare intrerupere pentru butonul PB2, adica PCINT10 */
	PCMSK1 |= (1<<PCINT10);
     8e2:	ec e6       	ldi	r30, 0x6C	; 108
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	84 60       	ori	r24, 0x04	; 4
     8ea:	80 83       	st	Z, r24
	
	/* functii de biblioteca pentru initializare LCD */
	LCD_init();
     8ec:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_init>
	/* functii de biblioteca pentru initializare USART (comunicatie cu ESP) */
	USART0_init();
     8f0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <USART0_init>
	/* functii de biblioteca pentru initializare ADC (colectare date de la cei 3 senzori) */
	adc_init();
     8f4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <adc_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	83 ed       	ldi	r24, 0xD3	; 211
     8fc:	90 e3       	ldi	r25, 0x30	; 48
     8fe:	21 50       	subi	r18, 0x01	; 1
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <main+0x40>
     906:	00 c0       	rjmp	.+0      	; 0x908 <main+0x4a>
     908:	00 00       	nop
	
	/* lasam ragaz controllerului pt a se stabiliza toate initializarile facute de noi */
    _delay_ms(1000);
	
	/* activare USER led */
	DDRD |= (1 << PD7);
     90a:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1 << PD7);
     90c:	5f 9a       	sbi	0x0b, 7	; 11
	
	/* activare backlight LED */
	DDRC |= (1 << PC2);
     90e:	3a 9a       	sbi	0x07, 2	; 7
	PORTC |= (1 << PC2);
     910:	42 9a       	sbi	0x08, 2	; 8
	
	/* dezactivez echo pentru comenzile date spre ESP */
	USART0_print("ATE0\r\n");
     912:	89 ec       	ldi	r24, 0xC9	; 201
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 09 05 	call	0xa12	; 0xa12 <USART0_print>
	read_until_ok();
     91a:	0e 94 a4 02 	call	0x548	; 0x548 <read_until_ok>
	
	/* permit conexiuni multiple la ESP (necesar pentru a porni serverul de ESP) */
	USART0_print("AT+CIPMUX=1\r\n");
     91e:	80 ed       	ldi	r24, 0xD0	; 208
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 09 05 	call	0xa12	; 0xa12 <USART0_print>
	read_until_ok();
     926:	0e 94 a4 02 	call	0x548	; 0x548 <read_until_ok>
	
	/* pornesc serverul pe portul 80 */
	USART0_print("AT+CIPSERVER=1,80\r\n");
     92a:	8e ed       	ldi	r24, 0xDE	; 222
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 09 05 	call	0xa12	; 0xa12 <USART0_print>
	read_until_ok();
     932:	0e 94 a4 02 	call	0x548	; 0x548 <read_until_ok>
	
	/* curatare output ESP; nu e necesara */
	USART0_print("AT\r\n");
     936:	82 ef       	ldi	r24, 0xF2	; 242
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 09 05 	call	0xa12	; 0xa12 <USART0_print>
	read_until_ok();
     93e:	0e 94 a4 02 	call	0x548	; 0x548 <read_until_ok>
	
	LCD_printAt(0, "ok");
     942:	67 ef       	ldi	r22, 0xF7	; 247
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_printAt>
	
	char request[256] = "";
     94c:	1a 82       	std	Y+2, r1	; 0x02
     94e:	19 82       	std	Y+1, r1	; 0x01
     950:	fe 01       	movw	r30, r28
     952:	33 96       	adiw	r30, 0x03	; 3
     954:	8e ef       	ldi	r24, 0xFE	; 254
     956:	df 01       	movw	r26, r30
     958:	1d 92       	st	X+, r1
     95a:	8a 95       	dec	r24
     95c:	e9 f7       	brne	.-6      	; 0x958 <main+0x9a>
	 * REQUEST (terminat de /r/n/r/n)
	 * 0,CLOSED
	 */
	while(1) {
		/* astept sa se conecteze cineva la mine */
		generic_read_until("CONNECT\r\n");
     95e:	8a ef       	ldi	r24, 0xFA	; 250
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <generic_read_until>
		
		/* ma duc pana la requestul efectiv HTTP (adica cererea de tipul GET /api?param=3 HTTP/1.1 */
		generic_read_until("GET /");
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <generic_read_until>
     96e:	fe 01       	movw	r30, r28
     970:	31 96       	adiw	r30, 0x01	; 1
     972:	7f 01       	movw	r14, r30
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	10 e0       	ldi	r17, 0x00	; 0
		/* salvez tot pathul in vectorul request */
		while (1) {
			char c = USART0_receive();
     978:	0e 94 01 05 	call	0xa02	; 0xa02 <USART0_receive>
			if (c != ' ') {
     97c:	80 32       	cpi	r24, 0x20	; 32
     97e:	31 f0       	breq	.+12     	; 0x98c <main+0xce>
				request[cnt++] = c;
     980:	0f 5f       	subi	r16, 0xFF	; 255
     982:	1f 4f       	sbci	r17, 0xFF	; 255
     984:	d7 01       	movw	r26, r14
     986:	8d 93       	st	X+, r24
     988:	7d 01       	movw	r14, r26
			} else {
				break;
			}
		}
     98a:	f6 cf       	rjmp	.-20     	; 0x978 <main+0xba>
		request[cnt] = '\0';
     98c:	e1 e0       	ldi	r30, 0x01	; 1
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ec 0f       	add	r30, r28
     992:	fd 1f       	adc	r31, r29
     994:	e0 0f       	add	r30, r16
     996:	f1 1f       	adc	r31, r17
     998:	10 82       	st	Z, r1
		LCD_clear_top_line();
     99a:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_clear_top_line>
		LCD_printAt(0, request);
     99e:	be 01       	movw	r22, r28
     9a0:	6f 5f       	subi	r22, 0xFF	; 255
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_printAt>
		cnt = 0;
		
		/* citesc si restul requestului HTTP, adica \r\n\r\n */
		read_until_2crlf();
     9aa:	0e 94 38 03 	call	0x670	; 0x670 <read_until_2crlf>
		
		/* astept sa se deconecteze de la mine inainte sa ma apuc de alt request */
		generic_read_until("CLOSED\r\n");
     9ae:	8a e0       	ldi	r24, 0x0A	; 10
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <generic_read_until>
		
	}
     9b6:	d3 cf       	rjmp	.-90     	; 0x95e <main+0xa0>

000009b8 <USART0_init>:
 * Functie de initializare a controllerului USART
 */
void USART0_init()
{
    /* seteaza baud rate la 115.2K */
    UBRR0H = 0;
     9b8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = 8;
     9bc:	88 e0       	ldi	r24, 0x08	; 8
     9be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    
	/* selecteaza mod asincron */
	UCSR0C &= ~(1<<UMSEL00);
     9c2:	e2 ec       	ldi	r30, 0xC2	; 194
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	8f 7b       	andi	r24, 0xBF	; 191
     9ca:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<UMSEL01);
     9cc:	80 81       	ld	r24, Z
     9ce:	8f 77       	andi	r24, 0x7F	; 127
     9d0:	80 83       	st	Z, r24

    /* seteaza formatul frame-ului: 8 biti de date */
	UCSR0C |= (2<<UCSZ00);
     9d2:	80 81       	ld	r24, Z
     9d4:	84 60       	ori	r24, 0x04	; 4
     9d6:	80 83       	st	Z, r24
	
	/* 1 bit de stop */
    UCSR0C &= ~(1<<USBS0);
     9d8:	80 81       	ld	r24, Z
     9da:	87 7f       	andi	r24, 0xF7	; 247
     9dc:	80 83       	st	Z, r24
    
	/* fara paritate */
	UCSR0C &= ~(1<<UPM00);
     9de:	80 81       	ld	r24, Z
     9e0:	8f 7e       	andi	r24, 0xEF	; 239
     9e2:	80 83       	st	Z, r24
    UCSR0C &= ~(1<<UPM01);
     9e4:	80 81       	ld	r24, Z
     9e6:	8f 7d       	andi	r24, 0xDF	; 223
     9e8:	80 83       	st	Z, r24
	
	/* porneste transmitatorul si receptorul */
	UCSR0B = (1<<TXEN0) | (1<<RXEN0);
     9ea:	88 e1       	ldi	r24, 0x18	; 24
     9ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     9f0:	08 95       	ret

000009f2 <USART0_transmit>:
 * @param data - caracterul de transmis
 */
void USART0_transmit(char data)
{
    /* asteapta pana bufferul e gol */
    while(!(UCSR0A & (1<<UDRE0)));
     9f2:	e0 ec       	ldi	r30, 0xC0	; 192
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	90 81       	ld	r25, Z
     9f8:	95 ff       	sbrs	r25, 5
     9fa:	fd cf       	rjmp	.-6      	; 0x9f6 <USART0_transmit+0x4>

    /* pune datele in buffer; transmisia va porni automat in urma scrierii */
    UDR0 = data;
     9fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a00:	08 95       	ret

00000a02 <USART0_receive>:
 * @return - caracterul primit
 */
char USART0_receive()
{
    /* asteapta cat timp bufferul e gol */
    while(!(UCSR0A & (1<<RXC0)));
     a02:	e0 ec       	ldi	r30, 0xC0	; 192
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 81       	ld	r24, Z
     a08:	88 23       	and	r24, r24
     a0a:	ec f7       	brge	.-6      	; 0xa06 <USART0_receive+0x4>

    /* returneaza datele din buffer */
    return UDR0;
     a0c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     a10:	08 95       	ret

00000a12 <USART0_print>:
 * Functie ce transmite un sir de caractere prin USART
 *
 * @param data - sirul (terminat cu '\0') de transmis
 */
void USART0_print(const char *data)
{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
    while(*data != '\0')
     a18:	88 81       	ld	r24, Y
     a1a:	88 23       	and	r24, r24
     a1c:	31 f0       	breq	.+12     	; 0xa2a <USART0_print+0x18>
     a1e:	21 96       	adiw	r28, 0x01	; 1
        USART0_transmit(*data++);
     a20:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <USART0_transmit>
 *
 * @param data - sirul (terminat cu '\0') de transmis
 */
void USART0_print(const char *data)
{
    while(*data != '\0')
     a24:	89 91       	ld	r24, Y+
     a26:	81 11       	cpse	r24, r1
     a28:	fb cf       	rjmp	.-10     	; 0xa20 <USART0_print+0xe>
        USART0_transmit(*data++);
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <__subsf3>:
     a30:	50 58       	subi	r21, 0x80	; 128

00000a32 <__addsf3>:
     a32:	bb 27       	eor	r27, r27
     a34:	aa 27       	eor	r26, r26
     a36:	0e 94 30 05 	call	0xa60	; 0xa60 <__addsf3x>
     a3a:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_round>
     a3e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fp_pscA>
     a42:	38 f0       	brcs	.+14     	; 0xa52 <__addsf3+0x20>
     a44:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_pscB>
     a48:	20 f0       	brcs	.+8      	; 0xa52 <__addsf3+0x20>
     a4a:	39 f4       	brne	.+14     	; 0xa5a <__addsf3+0x28>
     a4c:	9f 3f       	cpi	r25, 0xFF	; 255
     a4e:	19 f4       	brne	.+6      	; 0xa56 <__addsf3+0x24>
     a50:	26 f4       	brtc	.+8      	; 0xa5a <__addsf3+0x28>
     a52:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_nan>
     a56:	0e f4       	brtc	.+2      	; 0xa5a <__addsf3+0x28>
     a58:	e0 95       	com	r30
     a5a:	e7 fb       	bst	r30, 7
     a5c:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_inf>

00000a60 <__addsf3x>:
     a60:	e9 2f       	mov	r30, r25
     a62:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fp_split3>
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__addsf3+0xc>
     a68:	ba 17       	cp	r27, r26
     a6a:	62 07       	cpc	r22, r18
     a6c:	73 07       	cpc	r23, r19
     a6e:	84 07       	cpc	r24, r20
     a70:	95 07       	cpc	r25, r21
     a72:	20 f0       	brcs	.+8      	; 0xa7c <__addsf3x+0x1c>
     a74:	79 f4       	brne	.+30     	; 0xa94 <__addsf3x+0x34>
     a76:	a6 f5       	brtc	.+104    	; 0xae0 <__addsf3x+0x80>
     a78:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_zero>
     a7c:	0e f4       	brtc	.+2      	; 0xa80 <__addsf3x+0x20>
     a7e:	e0 95       	com	r30
     a80:	0b 2e       	mov	r0, r27
     a82:	ba 2f       	mov	r27, r26
     a84:	a0 2d       	mov	r26, r0
     a86:	0b 01       	movw	r0, r22
     a88:	b9 01       	movw	r22, r18
     a8a:	90 01       	movw	r18, r0
     a8c:	0c 01       	movw	r0, r24
     a8e:	ca 01       	movw	r24, r20
     a90:	a0 01       	movw	r20, r0
     a92:	11 24       	eor	r1, r1
     a94:	ff 27       	eor	r31, r31
     a96:	59 1b       	sub	r21, r25
     a98:	99 f0       	breq	.+38     	; 0xac0 <__addsf3x+0x60>
     a9a:	59 3f       	cpi	r21, 0xF9	; 249
     a9c:	50 f4       	brcc	.+20     	; 0xab2 <__addsf3x+0x52>
     a9e:	50 3e       	cpi	r21, 0xE0	; 224
     aa0:	68 f1       	brcs	.+90     	; 0xafc <__addsf3x+0x9c>
     aa2:	1a 16       	cp	r1, r26
     aa4:	f0 40       	sbci	r31, 0x00	; 0
     aa6:	a2 2f       	mov	r26, r18
     aa8:	23 2f       	mov	r18, r19
     aaa:	34 2f       	mov	r19, r20
     aac:	44 27       	eor	r20, r20
     aae:	58 5f       	subi	r21, 0xF8	; 248
     ab0:	f3 cf       	rjmp	.-26     	; 0xa98 <__addsf3x+0x38>
     ab2:	46 95       	lsr	r20
     ab4:	37 95       	ror	r19
     ab6:	27 95       	ror	r18
     ab8:	a7 95       	ror	r26
     aba:	f0 40       	sbci	r31, 0x00	; 0
     abc:	53 95       	inc	r21
     abe:	c9 f7       	brne	.-14     	; 0xab2 <__addsf3x+0x52>
     ac0:	7e f4       	brtc	.+30     	; 0xae0 <__addsf3x+0x80>
     ac2:	1f 16       	cp	r1, r31
     ac4:	ba 0b       	sbc	r27, r26
     ac6:	62 0b       	sbc	r22, r18
     ac8:	73 0b       	sbc	r23, r19
     aca:	84 0b       	sbc	r24, r20
     acc:	ba f0       	brmi	.+46     	; 0xafc <__addsf3x+0x9c>
     ace:	91 50       	subi	r25, 0x01	; 1
     ad0:	a1 f0       	breq	.+40     	; 0xafa <__addsf3x+0x9a>
     ad2:	ff 0f       	add	r31, r31
     ad4:	bb 1f       	adc	r27, r27
     ad6:	66 1f       	adc	r22, r22
     ad8:	77 1f       	adc	r23, r23
     ada:	88 1f       	adc	r24, r24
     adc:	c2 f7       	brpl	.-16     	; 0xace <__addsf3x+0x6e>
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__addsf3x+0x9c>
     ae0:	ba 0f       	add	r27, r26
     ae2:	62 1f       	adc	r22, r18
     ae4:	73 1f       	adc	r23, r19
     ae6:	84 1f       	adc	r24, r20
     ae8:	48 f4       	brcc	.+18     	; 0xafc <__addsf3x+0x9c>
     aea:	87 95       	ror	r24
     aec:	77 95       	ror	r23
     aee:	67 95       	ror	r22
     af0:	b7 95       	ror	r27
     af2:	f7 95       	ror	r31
     af4:	9e 3f       	cpi	r25, 0xFE	; 254
     af6:	08 f0       	brcs	.+2      	; 0xafa <__addsf3x+0x9a>
     af8:	b0 cf       	rjmp	.-160    	; 0xa5a <__addsf3+0x28>
     afa:	93 95       	inc	r25
     afc:	88 0f       	add	r24, r24
     afe:	08 f0       	brcs	.+2      	; 0xb02 <__addsf3x+0xa2>
     b00:	99 27       	eor	r25, r25
     b02:	ee 0f       	add	r30, r30
     b04:	97 95       	ror	r25
     b06:	87 95       	ror	r24
     b08:	08 95       	ret

00000b0a <__divsf3>:
     b0a:	0e 94 99 05 	call	0xb32	; 0xb32 <__divsf3x>
     b0e:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_round>
     b12:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_pscB>
     b16:	58 f0       	brcs	.+22     	; 0xb2e <__divsf3+0x24>
     b18:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fp_pscA>
     b1c:	40 f0       	brcs	.+16     	; 0xb2e <__divsf3+0x24>
     b1e:	29 f4       	brne	.+10     	; 0xb2a <__divsf3+0x20>
     b20:	5f 3f       	cpi	r21, 0xFF	; 255
     b22:	29 f0       	breq	.+10     	; 0xb2e <__divsf3+0x24>
     b24:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_inf>
     b28:	51 11       	cpse	r21, r1
     b2a:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_szero>
     b2e:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_nan>

00000b32 <__divsf3x>:
     b32:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fp_split3>
     b36:	68 f3       	brcs	.-38     	; 0xb12 <__divsf3+0x8>

00000b38 <__divsf3_pse>:
     b38:	99 23       	and	r25, r25
     b3a:	b1 f3       	breq	.-20     	; 0xb28 <__divsf3+0x1e>
     b3c:	55 23       	and	r21, r21
     b3e:	91 f3       	breq	.-28     	; 0xb24 <__divsf3+0x1a>
     b40:	95 1b       	sub	r25, r21
     b42:	55 0b       	sbc	r21, r21
     b44:	bb 27       	eor	r27, r27
     b46:	aa 27       	eor	r26, r26
     b48:	62 17       	cp	r22, r18
     b4a:	73 07       	cpc	r23, r19
     b4c:	84 07       	cpc	r24, r20
     b4e:	38 f0       	brcs	.+14     	; 0xb5e <__divsf3_pse+0x26>
     b50:	9f 5f       	subi	r25, 0xFF	; 255
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	aa 1f       	adc	r26, r26
     b5c:	a9 f3       	breq	.-22     	; 0xb48 <__divsf3_pse+0x10>
     b5e:	35 d0       	rcall	.+106    	; 0xbca <__divsf3_pse+0x92>
     b60:	0e 2e       	mov	r0, r30
     b62:	3a f0       	brmi	.+14     	; 0xb72 <__divsf3_pse+0x3a>
     b64:	e0 e8       	ldi	r30, 0x80	; 128
     b66:	32 d0       	rcall	.+100    	; 0xbcc <__divsf3_pse+0x94>
     b68:	91 50       	subi	r25, 0x01	; 1
     b6a:	50 40       	sbci	r21, 0x00	; 0
     b6c:	e6 95       	lsr	r30
     b6e:	00 1c       	adc	r0, r0
     b70:	ca f7       	brpl	.-14     	; 0xb64 <__divsf3_pse+0x2c>
     b72:	2b d0       	rcall	.+86     	; 0xbca <__divsf3_pse+0x92>
     b74:	fe 2f       	mov	r31, r30
     b76:	29 d0       	rcall	.+82     	; 0xbca <__divsf3_pse+0x92>
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	88 1f       	adc	r24, r24
     b7e:	bb 1f       	adc	r27, r27
     b80:	26 17       	cp	r18, r22
     b82:	37 07       	cpc	r19, r23
     b84:	48 07       	cpc	r20, r24
     b86:	ab 07       	cpc	r26, r27
     b88:	b0 e8       	ldi	r27, 0x80	; 128
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__divsf3_pse+0x56>
     b8c:	bb 0b       	sbc	r27, r27
     b8e:	80 2d       	mov	r24, r0
     b90:	bf 01       	movw	r22, r30
     b92:	ff 27       	eor	r31, r31
     b94:	93 58       	subi	r25, 0x83	; 131
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	3a f0       	brmi	.+14     	; 0xba8 <__divsf3_pse+0x70>
     b9a:	9e 3f       	cpi	r25, 0xFE	; 254
     b9c:	51 05       	cpc	r21, r1
     b9e:	78 f0       	brcs	.+30     	; 0xbbe <__divsf3_pse+0x86>
     ba0:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_inf>
     ba4:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_szero>
     ba8:	5f 3f       	cpi	r21, 0xFF	; 255
     baa:	e4 f3       	brlt	.-8      	; 0xba4 <__divsf3_pse+0x6c>
     bac:	98 3e       	cpi	r25, 0xE8	; 232
     bae:	d4 f3       	brlt	.-12     	; 0xba4 <__divsf3_pse+0x6c>
     bb0:	86 95       	lsr	r24
     bb2:	77 95       	ror	r23
     bb4:	67 95       	ror	r22
     bb6:	b7 95       	ror	r27
     bb8:	f7 95       	ror	r31
     bba:	9f 5f       	subi	r25, 0xFF	; 255
     bbc:	c9 f7       	brne	.-14     	; 0xbb0 <__divsf3_pse+0x78>
     bbe:	88 0f       	add	r24, r24
     bc0:	91 1d       	adc	r25, r1
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	97 f9       	bld	r25, 7
     bc8:	08 95       	ret
     bca:	e1 e0       	ldi	r30, 0x01	; 1
     bcc:	66 0f       	add	r22, r22
     bce:	77 1f       	adc	r23, r23
     bd0:	88 1f       	adc	r24, r24
     bd2:	bb 1f       	adc	r27, r27
     bd4:	62 17       	cp	r22, r18
     bd6:	73 07       	cpc	r23, r19
     bd8:	84 07       	cpc	r24, r20
     bda:	ba 07       	cpc	r27, r26
     bdc:	20 f0       	brcs	.+8      	; 0xbe6 <__divsf3_pse+0xae>
     bde:	62 1b       	sub	r22, r18
     be0:	73 0b       	sbc	r23, r19
     be2:	84 0b       	sbc	r24, r20
     be4:	ba 0b       	sbc	r27, r26
     be6:	ee 1f       	adc	r30, r30
     be8:	88 f7       	brcc	.-30     	; 0xbcc <__divsf3_pse+0x94>
     bea:	e0 95       	com	r30
     bec:	08 95       	ret

00000bee <__fixunssfsi>:
     bee:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_splitA>
     bf2:	88 f0       	brcs	.+34     	; 0xc16 <__fixunssfsi+0x28>
     bf4:	9f 57       	subi	r25, 0x7F	; 127
     bf6:	98 f0       	brcs	.+38     	; 0xc1e <__fixunssfsi+0x30>
     bf8:	b9 2f       	mov	r27, r25
     bfa:	99 27       	eor	r25, r25
     bfc:	b7 51       	subi	r27, 0x17	; 23
     bfe:	b0 f0       	brcs	.+44     	; 0xc2c <__fixunssfsi+0x3e>
     c00:	e1 f0       	breq	.+56     	; 0xc3a <__fixunssfsi+0x4c>
     c02:	66 0f       	add	r22, r22
     c04:	77 1f       	adc	r23, r23
     c06:	88 1f       	adc	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	1a f0       	brmi	.+6      	; 0xc12 <__fixunssfsi+0x24>
     c0c:	ba 95       	dec	r27
     c0e:	c9 f7       	brne	.-14     	; 0xc02 <__fixunssfsi+0x14>
     c10:	14 c0       	rjmp	.+40     	; 0xc3a <__fixunssfsi+0x4c>
     c12:	b1 30       	cpi	r27, 0x01	; 1
     c14:	91 f0       	breq	.+36     	; 0xc3a <__fixunssfsi+0x4c>
     c16:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__fp_zero>
     c1a:	b1 e0       	ldi	r27, 0x01	; 1
     c1c:	08 95       	ret
     c1e:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_zero>
     c22:	67 2f       	mov	r22, r23
     c24:	78 2f       	mov	r23, r24
     c26:	88 27       	eor	r24, r24
     c28:	b8 5f       	subi	r27, 0xF8	; 248
     c2a:	39 f0       	breq	.+14     	; 0xc3a <__fixunssfsi+0x4c>
     c2c:	b9 3f       	cpi	r27, 0xF9	; 249
     c2e:	cc f3       	brlt	.-14     	; 0xc22 <__fixunssfsi+0x34>
     c30:	86 95       	lsr	r24
     c32:	77 95       	ror	r23
     c34:	67 95       	ror	r22
     c36:	b3 95       	inc	r27
     c38:	d9 f7       	brne	.-10     	; 0xc30 <__fixunssfsi+0x42>
     c3a:	3e f4       	brtc	.+14     	; 0xc4a <__fixunssfsi+0x5c>
     c3c:	90 95       	com	r25
     c3e:	80 95       	com	r24
     c40:	70 95       	com	r23
     c42:	61 95       	neg	r22
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	8f 4f       	sbci	r24, 0xFF	; 255
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	08 95       	ret

00000c4c <__floatunsisf>:
     c4c:	e8 94       	clt
     c4e:	09 c0       	rjmp	.+18     	; 0xc62 <__floatsisf+0x12>

00000c50 <__floatsisf>:
     c50:	97 fb       	bst	r25, 7
     c52:	3e f4       	brtc	.+14     	; 0xc62 <__floatsisf+0x12>
     c54:	90 95       	com	r25
     c56:	80 95       	com	r24
     c58:	70 95       	com	r23
     c5a:	61 95       	neg	r22
     c5c:	7f 4f       	sbci	r23, 0xFF	; 255
     c5e:	8f 4f       	sbci	r24, 0xFF	; 255
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	99 23       	and	r25, r25
     c64:	a9 f0       	breq	.+42     	; 0xc90 <__floatsisf+0x40>
     c66:	f9 2f       	mov	r31, r25
     c68:	96 e9       	ldi	r25, 0x96	; 150
     c6a:	bb 27       	eor	r27, r27
     c6c:	93 95       	inc	r25
     c6e:	f6 95       	lsr	r31
     c70:	87 95       	ror	r24
     c72:	77 95       	ror	r23
     c74:	67 95       	ror	r22
     c76:	b7 95       	ror	r27
     c78:	f1 11       	cpse	r31, r1
     c7a:	f8 cf       	rjmp	.-16     	; 0xc6c <__floatsisf+0x1c>
     c7c:	fa f4       	brpl	.+62     	; 0xcbc <__floatsisf+0x6c>
     c7e:	bb 0f       	add	r27, r27
     c80:	11 f4       	brne	.+4      	; 0xc86 <__floatsisf+0x36>
     c82:	60 ff       	sbrs	r22, 0
     c84:	1b c0       	rjmp	.+54     	; 0xcbc <__floatsisf+0x6c>
     c86:	6f 5f       	subi	r22, 0xFF	; 255
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	8f 4f       	sbci	r24, 0xFF	; 255
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	16 c0       	rjmp	.+44     	; 0xcbc <__floatsisf+0x6c>
     c90:	88 23       	and	r24, r24
     c92:	11 f0       	breq	.+4      	; 0xc98 <__floatsisf+0x48>
     c94:	96 e9       	ldi	r25, 0x96	; 150
     c96:	11 c0       	rjmp	.+34     	; 0xcba <__floatsisf+0x6a>
     c98:	77 23       	and	r23, r23
     c9a:	21 f0       	breq	.+8      	; 0xca4 <__floatsisf+0x54>
     c9c:	9e e8       	ldi	r25, 0x8E	; 142
     c9e:	87 2f       	mov	r24, r23
     ca0:	76 2f       	mov	r23, r22
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <__floatsisf+0x5e>
     ca4:	66 23       	and	r22, r22
     ca6:	71 f0       	breq	.+28     	; 0xcc4 <__floatsisf+0x74>
     ca8:	96 e8       	ldi	r25, 0x86	; 134
     caa:	86 2f       	mov	r24, r22
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	2a f0       	brmi	.+10     	; 0xcbc <__floatsisf+0x6c>
     cb2:	9a 95       	dec	r25
     cb4:	66 0f       	add	r22, r22
     cb6:	77 1f       	adc	r23, r23
     cb8:	88 1f       	adc	r24, r24
     cba:	da f7       	brpl	.-10     	; 0xcb2 <__floatsisf+0x62>
     cbc:	88 0f       	add	r24, r24
     cbe:	96 95       	lsr	r25
     cc0:	87 95       	ror	r24
     cc2:	97 f9       	bld	r25, 7
     cc4:	08 95       	ret

00000cc6 <__fp_inf>:
     cc6:	97 f9       	bld	r25, 7
     cc8:	9f 67       	ori	r25, 0x7F	; 127
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	08 95       	ret

00000cd2 <__fp_nan>:
     cd2:	9f ef       	ldi	r25, 0xFF	; 255
     cd4:	80 ec       	ldi	r24, 0xC0	; 192
     cd6:	08 95       	ret

00000cd8 <__fp_pscA>:
     cd8:	00 24       	eor	r0, r0
     cda:	0a 94       	dec	r0
     cdc:	16 16       	cp	r1, r22
     cde:	17 06       	cpc	r1, r23
     ce0:	18 06       	cpc	r1, r24
     ce2:	09 06       	cpc	r0, r25
     ce4:	08 95       	ret

00000ce6 <__fp_pscB>:
     ce6:	00 24       	eor	r0, r0
     ce8:	0a 94       	dec	r0
     cea:	12 16       	cp	r1, r18
     cec:	13 06       	cpc	r1, r19
     cee:	14 06       	cpc	r1, r20
     cf0:	05 06       	cpc	r0, r21
     cf2:	08 95       	ret

00000cf4 <__fp_round>:
     cf4:	09 2e       	mov	r0, r25
     cf6:	03 94       	inc	r0
     cf8:	00 0c       	add	r0, r0
     cfa:	11 f4       	brne	.+4      	; 0xd00 <__fp_round+0xc>
     cfc:	88 23       	and	r24, r24
     cfe:	52 f0       	brmi	.+20     	; 0xd14 <__fp_round+0x20>
     d00:	bb 0f       	add	r27, r27
     d02:	40 f4       	brcc	.+16     	; 0xd14 <__fp_round+0x20>
     d04:	bf 2b       	or	r27, r31
     d06:	11 f4       	brne	.+4      	; 0xd0c <__fp_round+0x18>
     d08:	60 ff       	sbrs	r22, 0
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <__fp_round+0x20>
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	8f 4f       	sbci	r24, 0xFF	; 255
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	08 95       	ret

00000d16 <__fp_split3>:
     d16:	57 fd       	sbrc	r21, 7
     d18:	90 58       	subi	r25, 0x80	; 128
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	59 f0       	breq	.+22     	; 0xd36 <__fp_splitA+0x10>
     d20:	5f 3f       	cpi	r21, 0xFF	; 255
     d22:	71 f0       	breq	.+28     	; 0xd40 <__fp_splitA+0x1a>
     d24:	47 95       	ror	r20

00000d26 <__fp_splitA>:
     d26:	88 0f       	add	r24, r24
     d28:	97 fb       	bst	r25, 7
     d2a:	99 1f       	adc	r25, r25
     d2c:	61 f0       	breq	.+24     	; 0xd46 <__fp_splitA+0x20>
     d2e:	9f 3f       	cpi	r25, 0xFF	; 255
     d30:	79 f0       	breq	.+30     	; 0xd50 <__fp_splitA+0x2a>
     d32:	87 95       	ror	r24
     d34:	08 95       	ret
     d36:	12 16       	cp	r1, r18
     d38:	13 06       	cpc	r1, r19
     d3a:	14 06       	cpc	r1, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	f2 cf       	rjmp	.-28     	; 0xd24 <__fp_split3+0xe>
     d40:	46 95       	lsr	r20
     d42:	f1 df       	rcall	.-30     	; 0xd26 <__fp_splitA>
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <__fp_splitA+0x30>
     d46:	16 16       	cp	r1, r22
     d48:	17 06       	cpc	r1, r23
     d4a:	18 06       	cpc	r1, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	f1 cf       	rjmp	.-30     	; 0xd32 <__fp_splitA+0xc>
     d50:	86 95       	lsr	r24
     d52:	71 05       	cpc	r23, r1
     d54:	61 05       	cpc	r22, r1
     d56:	08 94       	sec
     d58:	08 95       	ret

00000d5a <__fp_zero>:
     d5a:	e8 94       	clt

00000d5c <__fp_szero>:
     d5c:	bb 27       	eor	r27, r27
     d5e:	66 27       	eor	r22, r22
     d60:	77 27       	eor	r23, r23
     d62:	cb 01       	movw	r24, r22
     d64:	97 f9       	bld	r25, 7
     d66:	08 95       	ret

00000d68 <__mulsf3>:
     d68:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulsf3x>
     d6c:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_round>
     d70:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fp_pscA>
     d74:	38 f0       	brcs	.+14     	; 0xd84 <__mulsf3+0x1c>
     d76:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_pscB>
     d7a:	20 f0       	brcs	.+8      	; 0xd84 <__mulsf3+0x1c>
     d7c:	95 23       	and	r25, r21
     d7e:	11 f0       	breq	.+4      	; 0xd84 <__mulsf3+0x1c>
     d80:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_inf>
     d84:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_nan>
     d88:	11 24       	eor	r1, r1
     d8a:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_szero>

00000d8e <__mulsf3x>:
     d8e:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fp_split3>
     d92:	70 f3       	brcs	.-36     	; 0xd70 <__mulsf3+0x8>

00000d94 <__mulsf3_pse>:
     d94:	95 9f       	mul	r25, r21
     d96:	c1 f3       	breq	.-16     	; 0xd88 <__mulsf3+0x20>
     d98:	95 0f       	add	r25, r21
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	55 1f       	adc	r21, r21
     d9e:	62 9f       	mul	r22, r18
     da0:	f0 01       	movw	r30, r0
     da2:	72 9f       	mul	r23, r18
     da4:	bb 27       	eor	r27, r27
     da6:	f0 0d       	add	r31, r0
     da8:	b1 1d       	adc	r27, r1
     daa:	63 9f       	mul	r22, r19
     dac:	aa 27       	eor	r26, r26
     dae:	f0 0d       	add	r31, r0
     db0:	b1 1d       	adc	r27, r1
     db2:	aa 1f       	adc	r26, r26
     db4:	64 9f       	mul	r22, r20
     db6:	66 27       	eor	r22, r22
     db8:	b0 0d       	add	r27, r0
     dba:	a1 1d       	adc	r26, r1
     dbc:	66 1f       	adc	r22, r22
     dbe:	82 9f       	mul	r24, r18
     dc0:	22 27       	eor	r18, r18
     dc2:	b0 0d       	add	r27, r0
     dc4:	a1 1d       	adc	r26, r1
     dc6:	62 1f       	adc	r22, r18
     dc8:	73 9f       	mul	r23, r19
     dca:	b0 0d       	add	r27, r0
     dcc:	a1 1d       	adc	r26, r1
     dce:	62 1f       	adc	r22, r18
     dd0:	83 9f       	mul	r24, r19
     dd2:	a0 0d       	add	r26, r0
     dd4:	61 1d       	adc	r22, r1
     dd6:	22 1f       	adc	r18, r18
     dd8:	74 9f       	mul	r23, r20
     dda:	33 27       	eor	r19, r19
     ddc:	a0 0d       	add	r26, r0
     dde:	61 1d       	adc	r22, r1
     de0:	23 1f       	adc	r18, r19
     de2:	84 9f       	mul	r24, r20
     de4:	60 0d       	add	r22, r0
     de6:	21 1d       	adc	r18, r1
     de8:	82 2f       	mov	r24, r18
     dea:	76 2f       	mov	r23, r22
     dec:	6a 2f       	mov	r22, r26
     dee:	11 24       	eor	r1, r1
     df0:	9f 57       	subi	r25, 0x7F	; 127
     df2:	50 40       	sbci	r21, 0x00	; 0
     df4:	9a f0       	brmi	.+38     	; 0xe1c <__mulsf3_pse+0x88>
     df6:	f1 f0       	breq	.+60     	; 0xe34 <__mulsf3_pse+0xa0>
     df8:	88 23       	and	r24, r24
     dfa:	4a f0       	brmi	.+18     	; 0xe0e <__mulsf3_pse+0x7a>
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	bb 1f       	adc	r27, r27
     e02:	66 1f       	adc	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	91 50       	subi	r25, 0x01	; 1
     e0a:	50 40       	sbci	r21, 0x00	; 0
     e0c:	a9 f7       	brne	.-22     	; 0xdf8 <__mulsf3_pse+0x64>
     e0e:	9e 3f       	cpi	r25, 0xFE	; 254
     e10:	51 05       	cpc	r21, r1
     e12:	80 f0       	brcs	.+32     	; 0xe34 <__mulsf3_pse+0xa0>
     e14:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_inf>
     e18:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_szero>
     e1c:	5f 3f       	cpi	r21, 0xFF	; 255
     e1e:	e4 f3       	brlt	.-8      	; 0xe18 <__mulsf3_pse+0x84>
     e20:	98 3e       	cpi	r25, 0xE8	; 232
     e22:	d4 f3       	brlt	.-12     	; 0xe18 <__mulsf3_pse+0x84>
     e24:	86 95       	lsr	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b7 95       	ror	r27
     e2c:	f7 95       	ror	r31
     e2e:	e7 95       	ror	r30
     e30:	9f 5f       	subi	r25, 0xFF	; 255
     e32:	c1 f7       	brne	.-16     	; 0xe24 <__mulsf3_pse+0x90>
     e34:	fe 2b       	or	r31, r30
     e36:	88 0f       	add	r24, r24
     e38:	91 1d       	adc	r25, r1
     e3a:	96 95       	lsr	r25
     e3c:	87 95       	ror	r24
     e3e:	97 f9       	bld	r25, 7
     e40:	08 95       	ret

00000e42 <pow>:
     e42:	fa 01       	movw	r30, r20
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	30 96       	adiw	r30, 0x00	; 0
     e4a:	21 05       	cpc	r18, r1
     e4c:	31 05       	cpc	r19, r1
     e4e:	a1 f1       	breq	.+104    	; 0xeb8 <pow+0x76>
     e50:	61 15       	cp	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	61 f4       	brne	.+24     	; 0xe6e <pow+0x2c>
     e56:	80 38       	cpi	r24, 0x80	; 128
     e58:	bf e3       	ldi	r27, 0x3F	; 63
     e5a:	9b 07       	cpc	r25, r27
     e5c:	49 f1       	breq	.+82     	; 0xeb0 <pow+0x6e>
     e5e:	68 94       	set
     e60:	90 38       	cpi	r25, 0x80	; 128
     e62:	81 05       	cpc	r24, r1
     e64:	61 f0       	breq	.+24     	; 0xe7e <pow+0x3c>
     e66:	80 38       	cpi	r24, 0x80	; 128
     e68:	bf ef       	ldi	r27, 0xFF	; 255
     e6a:	9b 07       	cpc	r25, r27
     e6c:	41 f0       	breq	.+16     	; 0xe7e <pow+0x3c>
     e6e:	99 23       	and	r25, r25
     e70:	4a f5       	brpl	.+82     	; 0xec4 <pow+0x82>
     e72:	ff 3f       	cpi	r31, 0xFF	; 255
     e74:	e1 05       	cpc	r30, r1
     e76:	31 05       	cpc	r19, r1
     e78:	21 05       	cpc	r18, r1
     e7a:	19 f1       	breq	.+70     	; 0xec2 <pow+0x80>
     e7c:	e8 94       	clt
     e7e:	08 94       	sec
     e80:	e7 95       	ror	r30
     e82:	d9 01       	movw	r26, r18
     e84:	aa 23       	and	r26, r26
     e86:	29 f4       	brne	.+10     	; 0xe92 <pow+0x50>
     e88:	ab 2f       	mov	r26, r27
     e8a:	be 2f       	mov	r27, r30
     e8c:	f8 5f       	subi	r31, 0xF8	; 248
     e8e:	d0 f3       	brcs	.-12     	; 0xe84 <pow+0x42>
     e90:	10 c0       	rjmp	.+32     	; 0xeb2 <pow+0x70>
     e92:	ff 5f       	subi	r31, 0xFF	; 255
     e94:	70 f4       	brcc	.+28     	; 0xeb2 <pow+0x70>
     e96:	a6 95       	lsr	r26
     e98:	e0 f7       	brcc	.-8      	; 0xe92 <pow+0x50>
     e9a:	f7 39       	cpi	r31, 0x97	; 151
     e9c:	50 f0       	brcs	.+20     	; 0xeb2 <pow+0x70>
     e9e:	19 f0       	breq	.+6      	; 0xea6 <pow+0x64>
     ea0:	ff 3a       	cpi	r31, 0xAF	; 175
     ea2:	38 f4       	brcc	.+14     	; 0xeb2 <pow+0x70>
     ea4:	9f 77       	andi	r25, 0x7F	; 127
     ea6:	9f 93       	push	r25
     ea8:	0d d0       	rcall	.+26     	; 0xec4 <pow+0x82>
     eaa:	0f 90       	pop	r0
     eac:	07 fc       	sbrc	r0, 7
     eae:	90 58       	subi	r25, 0x80	; 128
     eb0:	08 95       	ret
     eb2:	46 f0       	brts	.+16     	; 0xec4 <pow+0x82>
     eb4:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_nan>
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 e8       	ldi	r24, 0x80	; 128
     ebe:	9f e3       	ldi	r25, 0x3F	; 63
     ec0:	08 95       	ret
     ec2:	4f e7       	ldi	r20, 0x7F	; 127
     ec4:	9f 77       	andi	r25, 0x7F	; 127
     ec6:	5f 93       	push	r21
     ec8:	4f 93       	push	r20
     eca:	3f 93       	push	r19
     ecc:	2f 93       	push	r18
     ece:	0e 94 1c 08 	call	0x1038	; 0x1038 <log>
     ed2:	2f 91       	pop	r18
     ed4:	3f 91       	pop	r19
     ed6:	4f 91       	pop	r20
     ed8:	5f 91       	pop	r21
     eda:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulsf3>
     ede:	0c 94 79 07 	jmp	0xef2	; 0xef2 <exp>
     ee2:	29 f4       	brne	.+10     	; 0xeee <pow+0xac>
     ee4:	16 f0       	brts	.+4      	; 0xeea <pow+0xa8>
     ee6:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_inf>
     eea:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_zero>
     eee:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_nan>

00000ef2 <exp>:
     ef2:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_splitA>
     ef6:	a8 f3       	brcs	.-22     	; 0xee2 <pow+0xa0>
     ef8:	96 38       	cpi	r25, 0x86	; 134
     efa:	a0 f7       	brcc	.-24     	; 0xee4 <pow+0xa2>
     efc:	07 f8       	bld	r0, 7
     efe:	0f 92       	push	r0
     f00:	e8 94       	clt
     f02:	2b e3       	ldi	r18, 0x3B	; 59
     f04:	3a ea       	ldi	r19, 0xAA	; 170
     f06:	48 eb       	ldi	r20, 0xB8	; 184
     f08:	5f e7       	ldi	r21, 0x7F	; 127
     f0a:	0e 94 ca 06 	call	0xd94	; 0xd94 <__mulsf3_pse>
     f0e:	0f 92       	push	r0
     f10:	0f 92       	push	r0
     f12:	0f 92       	push	r0
     f14:	4d b7       	in	r20, 0x3d	; 61
     f16:	5e b7       	in	r21, 0x3e	; 62
     f18:	0f 92       	push	r0
     f1a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <modf>
     f1e:	ec e7       	ldi	r30, 0x7C	; 124
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_powser>
     f26:	4f 91       	pop	r20
     f28:	5f 91       	pop	r21
     f2a:	ef 91       	pop	r30
     f2c:	ff 91       	pop	r31
     f2e:	e5 95       	asr	r30
     f30:	ee 1f       	adc	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	49 f0       	breq	.+18     	; 0xf48 <exp+0x56>
     f36:	fe 57       	subi	r31, 0x7E	; 126
     f38:	e0 68       	ori	r30, 0x80	; 128
     f3a:	44 27       	eor	r20, r20
     f3c:	ee 0f       	add	r30, r30
     f3e:	44 1f       	adc	r20, r20
     f40:	fa 95       	dec	r31
     f42:	e1 f7       	brne	.-8      	; 0xf3c <exp+0x4a>
     f44:	41 95       	neg	r20
     f46:	55 0b       	sbc	r21, r21
     f48:	0e 94 de 07 	call	0xfbc	; 0xfbc <ldexp>
     f4c:	0f 90       	pop	r0
     f4e:	07 fe       	sbrs	r0, 7
     f50:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <inverse>
     f54:	08 95       	ret

00000f56 <__fp_powser>:
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	1f 93       	push	r17
     f5c:	0f 93       	push	r16
     f5e:	ff 92       	push	r15
     f60:	ef 92       	push	r14
     f62:	df 92       	push	r13
     f64:	7b 01       	movw	r14, r22
     f66:	8c 01       	movw	r16, r24
     f68:	68 94       	set
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <__fp_powser+0x22>
     f6c:	da 2e       	mov	r13, r26
     f6e:	ef 01       	movw	r28, r30
     f70:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulsf3x>
     f74:	fe 01       	movw	r30, r28
     f76:	e8 94       	clt
     f78:	a5 91       	lpm	r26, Z+
     f7a:	25 91       	lpm	r18, Z+
     f7c:	35 91       	lpm	r19, Z+
     f7e:	45 91       	lpm	r20, Z+
     f80:	55 91       	lpm	r21, Z+
     f82:	a6 f3       	brts	.-24     	; 0xf6c <__fp_powser+0x16>
     f84:	ef 01       	movw	r28, r30
     f86:	0e 94 30 05 	call	0xa60	; 0xa60 <__addsf3x>
     f8a:	fe 01       	movw	r30, r28
     f8c:	97 01       	movw	r18, r14
     f8e:	a8 01       	movw	r20, r16
     f90:	da 94       	dec	r13
     f92:	69 f7       	brne	.-38     	; 0xf6e <__fp_powser+0x18>
     f94:	df 90       	pop	r13
     f96:	ef 90       	pop	r14
     f98:	ff 90       	pop	r15
     f9a:	0f 91       	pop	r16
     f9c:	1f 91       	pop	r17
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <inverse>:
     fa4:	9b 01       	movw	r18, r22
     fa6:	ac 01       	movw	r20, r24
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	80 e8       	ldi	r24, 0x80	; 128
     fae:	9f e3       	ldi	r25, 0x3F	; 63
     fb0:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__divsf3>
     fb4:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_inf>
     fb8:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_mpack>

00000fbc <ldexp>:
     fbc:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_splitA>
     fc0:	d8 f3       	brcs	.-10     	; 0xfb8 <inverse+0x14>
     fc2:	99 23       	and	r25, r25
     fc4:	c9 f3       	breq	.-14     	; 0xfb8 <inverse+0x14>
     fc6:	94 0f       	add	r25, r20
     fc8:	51 1d       	adc	r21, r1
     fca:	a3 f3       	brvs	.-24     	; 0xfb4 <inverse+0x10>
     fcc:	91 50       	subi	r25, 0x01	; 1
     fce:	50 40       	sbci	r21, 0x00	; 0
     fd0:	94 f0       	brlt	.+36     	; 0xff6 <ldexp+0x3a>
     fd2:	59 f0       	breq	.+22     	; 0xfea <ldexp+0x2e>
     fd4:	88 23       	and	r24, r24
     fd6:	32 f0       	brmi	.+12     	; 0xfe4 <ldexp+0x28>
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	91 50       	subi	r25, 0x01	; 1
     fe0:	50 40       	sbci	r21, 0x00	; 0
     fe2:	c1 f7       	brne	.-16     	; 0xfd4 <ldexp+0x18>
     fe4:	9e 3f       	cpi	r25, 0xFE	; 254
     fe6:	51 05       	cpc	r21, r1
     fe8:	2c f7       	brge	.-54     	; 0xfb4 <inverse+0x10>
     fea:	88 0f       	add	r24, r24
     fec:	91 1d       	adc	r25, r1
     fee:	96 95       	lsr	r25
     ff0:	87 95       	ror	r24
     ff2:	97 f9       	bld	r25, 7
     ff4:	08 95       	ret
     ff6:	5f 3f       	cpi	r21, 0xFF	; 255
     ff8:	ac f0       	brlt	.+42     	; 0x1024 <ldexp+0x68>
     ffa:	98 3e       	cpi	r25, 0xE8	; 232
     ffc:	9c f0       	brlt	.+38     	; 0x1024 <ldexp+0x68>
     ffe:	bb 27       	eor	r27, r27
    1000:	86 95       	lsr	r24
    1002:	77 95       	ror	r23
    1004:	67 95       	ror	r22
    1006:	b7 95       	ror	r27
    1008:	08 f4       	brcc	.+2      	; 0x100c <ldexp+0x50>
    100a:	b1 60       	ori	r27, 0x01	; 1
    100c:	93 95       	inc	r25
    100e:	c1 f7       	brne	.-16     	; 0x1000 <ldexp+0x44>
    1010:	bb 0f       	add	r27, r27
    1012:	58 f7       	brcc	.-42     	; 0xfea <ldexp+0x2e>
    1014:	11 f4       	brne	.+4      	; 0x101a <ldexp+0x5e>
    1016:	60 ff       	sbrs	r22, 0
    1018:	e8 cf       	rjmp	.-48     	; 0xfea <ldexp+0x2e>
    101a:	6f 5f       	subi	r22, 0xFF	; 255
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	8f 4f       	sbci	r24, 0xFF	; 255
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	e3 cf       	rjmp	.-58     	; 0xfea <ldexp+0x2e>
    1024:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_szero>
    1028:	16 f0       	brts	.+4      	; 0x102e <ldexp+0x72>
    102a:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_mpack>
    102e:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_nan>
    1032:	68 94       	set
    1034:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_inf>

00001038 <log>:
    1038:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_splitA>
    103c:	a8 f3       	brcs	.-22     	; 0x1028 <ldexp+0x6c>
    103e:	99 23       	and	r25, r25
    1040:	c1 f3       	breq	.-16     	; 0x1032 <ldexp+0x76>
    1042:	ae f3       	brts	.-22     	; 0x102e <ldexp+0x72>
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	1f 93       	push	r17
    104a:	0f 93       	push	r16
    104c:	ff 92       	push	r15
    104e:	c9 2f       	mov	r28, r25
    1050:	dd 27       	eor	r29, r29
    1052:	88 23       	and	r24, r24
    1054:	2a f0       	brmi	.+10     	; 0x1060 <log+0x28>
    1056:	21 97       	sbiw	r28, 0x01	; 1
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	88 1f       	adc	r24, r24
    105e:	da f7       	brpl	.-10     	; 0x1056 <log+0x1e>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f eb       	ldi	r21, 0xBF	; 191
    1068:	9f e3       	ldi	r25, 0x3F	; 63
    106a:	88 39       	cpi	r24, 0x98	; 152
    106c:	20 f0       	brcs	.+8      	; 0x1076 <log+0x3e>
    106e:	80 3e       	cpi	r24, 0xE0	; 224
    1070:	38 f0       	brcs	.+14     	; 0x1080 <log+0x48>
    1072:	21 96       	adiw	r28, 0x01	; 1
    1074:	8f 77       	andi	r24, 0x7F	; 127
    1076:	0e 94 19 05 	call	0xa32	; 0xa32 <__addsf3>
    107a:	e4 ea       	ldi	r30, 0xA4	; 164
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <log+0x50>
    1080:	0e 94 19 05 	call	0xa32	; 0xa32 <__addsf3>
    1084:	e1 ed       	ldi	r30, 0xD1	; 209
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_powser>
    108c:	8b 01       	movw	r16, r22
    108e:	be 01       	movw	r22, r28
    1090:	ec 01       	movw	r28, r24
    1092:	fb 2e       	mov	r15, r27
    1094:	6f 57       	subi	r22, 0x7F	; 127
    1096:	71 09       	sbc	r23, r1
    1098:	75 95       	asr	r23
    109a:	77 1f       	adc	r23, r23
    109c:	88 0b       	sbc	r24, r24
    109e:	99 0b       	sbc	r25, r25
    10a0:	0e 94 28 06 	call	0xc50	; 0xc50 <__floatsisf>
    10a4:	28 e1       	ldi	r18, 0x18	; 24
    10a6:	32 e7       	ldi	r19, 0x72	; 114
    10a8:	41 e3       	ldi	r20, 0x31	; 49
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulsf3x>
    10b0:	af 2d       	mov	r26, r15
    10b2:	98 01       	movw	r18, r16
    10b4:	ae 01       	movw	r20, r28
    10b6:	ff 90       	pop	r15
    10b8:	0f 91       	pop	r16
    10ba:	1f 91       	pop	r17
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	0e 94 30 05 	call	0xa60	; 0xa60 <__addsf3x>
    10c4:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_round>

000010c8 <modf>:
    10c8:	fa 01       	movw	r30, r20
    10ca:	dc 01       	movw	r26, r24
    10cc:	aa 0f       	add	r26, r26
    10ce:	bb 1f       	adc	r27, r27
    10d0:	9b 01       	movw	r18, r22
    10d2:	ac 01       	movw	r20, r24
    10d4:	bf 57       	subi	r27, 0x7F	; 127
    10d6:	28 f4       	brcc	.+10     	; 0x10e2 <modf+0x1a>
    10d8:	22 27       	eor	r18, r18
    10da:	33 27       	eor	r19, r19
    10dc:	44 27       	eor	r20, r20
    10de:	50 78       	andi	r21, 0x80	; 128
    10e0:	20 c0       	rjmp	.+64     	; 0x1122 <modf+0x5a>
    10e2:	b7 51       	subi	r27, 0x17	; 23
    10e4:	90 f4       	brcc	.+36     	; 0x110a <modf+0x42>
    10e6:	ab 2f       	mov	r26, r27
    10e8:	00 24       	eor	r0, r0
    10ea:	46 95       	lsr	r20
    10ec:	37 95       	ror	r19
    10ee:	27 95       	ror	r18
    10f0:	01 1c       	adc	r0, r1
    10f2:	a3 95       	inc	r26
    10f4:	d2 f3       	brmi	.-12     	; 0x10ea <modf+0x22>
    10f6:	00 20       	and	r0, r0
    10f8:	71 f0       	breq	.+28     	; 0x1116 <modf+0x4e>
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	44 1f       	adc	r20, r20
    1100:	b3 95       	inc	r27
    1102:	da f3       	brmi	.-10     	; 0x10fa <modf+0x32>
    1104:	0e d0       	rcall	.+28     	; 0x1122 <modf+0x5a>
    1106:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__subsf3>
    110a:	61 30       	cpi	r22, 0x01	; 1
    110c:	71 05       	cpc	r23, r1
    110e:	a0 e8       	ldi	r26, 0x80	; 128
    1110:	8a 07       	cpc	r24, r26
    1112:	b9 46       	sbci	r27, 0x69	; 105
    1114:	30 f4       	brcc	.+12     	; 0x1122 <modf+0x5a>
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	66 27       	eor	r22, r22
    111c:	77 27       	eor	r23, r23
    111e:	88 27       	eor	r24, r24
    1120:	90 78       	andi	r25, 0x80	; 128
    1122:	30 96       	adiw	r30, 0x00	; 0
    1124:	21 f0       	breq	.+8      	; 0x112e <modf+0x66>
    1126:	20 83       	st	Z, r18
    1128:	31 83       	std	Z+1, r19	; 0x01
    112a:	42 83       	std	Z+2, r20	; 0x02
    112c:	53 83       	std	Z+3, r21	; 0x03
    112e:	08 95       	ret

00001130 <__fp_mpack>:
    1130:	9f 3f       	cpi	r25, 0xFF	; 255
    1132:	31 f0       	breq	.+12     	; 0x1140 <__fp_mpack_finite+0xc>

00001134 <__fp_mpack_finite>:
    1134:	91 50       	subi	r25, 0x01	; 1
    1136:	20 f4       	brcc	.+8      	; 0x1140 <__fp_mpack_finite+0xc>
    1138:	87 95       	ror	r24
    113a:	77 95       	ror	r23
    113c:	67 95       	ror	r22
    113e:	b7 95       	ror	r27
    1140:	88 0f       	add	r24, r24
    1142:	91 1d       	adc	r25, r1
    1144:	96 95       	lsr	r25
    1146:	87 95       	ror	r24
    1148:	97 f9       	bld	r25, 7
    114a:	08 95       	ret

0000114c <strcmp>:
    114c:	fb 01       	movw	r30, r22
    114e:	dc 01       	movw	r26, r24
    1150:	8d 91       	ld	r24, X+
    1152:	01 90       	ld	r0, Z+
    1154:	80 19       	sub	r24, r0
    1156:	01 10       	cpse	r0, r1
    1158:	d9 f3       	breq	.-10     	; 0x1150 <strcmp+0x4>
    115a:	99 0b       	sbc	r25, r25
    115c:	08 95       	ret

0000115e <sprintf>:
    115e:	ae e0       	ldi	r26, 0x0E	; 14
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 eb       	ldi	r30, 0xB5	; 181
    1164:	f8 e0       	ldi	r31, 0x08	; 8
    1166:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__prologue_saves__+0x1c>
    116a:	0d 89       	ldd	r16, Y+21	; 0x15
    116c:	1e 89       	ldd	r17, Y+22	; 0x16
    116e:	86 e0       	ldi	r24, 0x06	; 6
    1170:	8c 83       	std	Y+4, r24	; 0x04
    1172:	1a 83       	std	Y+2, r17	; 0x02
    1174:	09 83       	std	Y+1, r16	; 0x01
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	9f e7       	ldi	r25, 0x7F	; 127
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	ae 01       	movw	r20, r28
    1180:	47 5e       	subi	r20, 0xE7	; 231
    1182:	5f 4f       	sbci	r21, 0xFF	; 255
    1184:	6f 89       	ldd	r22, Y+23	; 0x17
    1186:	78 8d       	ldd	r23, Y+24	; 0x18
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <vfprintf>
    1190:	ef 81       	ldd	r30, Y+7	; 0x07
    1192:	f8 85       	ldd	r31, Y+8	; 0x08
    1194:	e0 0f       	add	r30, r16
    1196:	f1 1f       	adc	r31, r17
    1198:	10 82       	st	Z, r1
    119a:	2e 96       	adiw	r28, 0x0e	; 14
    119c:	e4 e0       	ldi	r30, 0x04	; 4
    119e:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__epilogue_restores__+0x1c>

000011a2 <vfprintf>:
    11a2:	ab e0       	ldi	r26, 0x0B	; 11
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e7 ed       	ldi	r30, 0xD7	; 215
    11a8:	f8 e0       	ldi	r31, 0x08	; 8
    11aa:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__prologue_saves__>
    11ae:	6c 01       	movw	r12, r24
    11b0:	7b 01       	movw	r14, r22
    11b2:	8a 01       	movw	r16, r20
    11b4:	fc 01       	movw	r30, r24
    11b6:	17 82       	std	Z+7, r1	; 0x07
    11b8:	16 82       	std	Z+6, r1	; 0x06
    11ba:	83 81       	ldd	r24, Z+3	; 0x03
    11bc:	81 ff       	sbrs	r24, 1
    11be:	cc c1       	rjmp	.+920    	; 0x1558 <vfprintf+0x3b6>
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	3c 01       	movw	r6, r24
    11c6:	f6 01       	movw	r30, r12
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	f7 01       	movw	r30, r14
    11cc:	93 fd       	sbrc	r25, 3
    11ce:	85 91       	lpm	r24, Z+
    11d0:	93 ff       	sbrs	r25, 3
    11d2:	81 91       	ld	r24, Z+
    11d4:	7f 01       	movw	r14, r30
    11d6:	88 23       	and	r24, r24
    11d8:	09 f4       	brne	.+2      	; 0x11dc <vfprintf+0x3a>
    11da:	ba c1       	rjmp	.+884    	; 0x1550 <vfprintf+0x3ae>
    11dc:	85 32       	cpi	r24, 0x25	; 37
    11de:	39 f4       	brne	.+14     	; 0x11ee <vfprintf+0x4c>
    11e0:	93 fd       	sbrc	r25, 3
    11e2:	85 91       	lpm	r24, Z+
    11e4:	93 ff       	sbrs	r25, 3
    11e6:	81 91       	ld	r24, Z+
    11e8:	7f 01       	movw	r14, r30
    11ea:	85 32       	cpi	r24, 0x25	; 37
    11ec:	29 f4       	brne	.+10     	; 0x11f8 <vfprintf+0x56>
    11ee:	b6 01       	movw	r22, r12
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    11f6:	e7 cf       	rjmp	.-50     	; 0x11c6 <vfprintf+0x24>
    11f8:	91 2c       	mov	r9, r1
    11fa:	21 2c       	mov	r2, r1
    11fc:	31 2c       	mov	r3, r1
    11fe:	ff e1       	ldi	r31, 0x1F	; 31
    1200:	f3 15       	cp	r31, r3
    1202:	d8 f0       	brcs	.+54     	; 0x123a <vfprintf+0x98>
    1204:	8b 32       	cpi	r24, 0x2B	; 43
    1206:	79 f0       	breq	.+30     	; 0x1226 <vfprintf+0x84>
    1208:	38 f4       	brcc	.+14     	; 0x1218 <vfprintf+0x76>
    120a:	80 32       	cpi	r24, 0x20	; 32
    120c:	79 f0       	breq	.+30     	; 0x122c <vfprintf+0x8a>
    120e:	83 32       	cpi	r24, 0x23	; 35
    1210:	a1 f4       	brne	.+40     	; 0x123a <vfprintf+0x98>
    1212:	23 2d       	mov	r18, r3
    1214:	20 61       	ori	r18, 0x10	; 16
    1216:	1d c0       	rjmp	.+58     	; 0x1252 <vfprintf+0xb0>
    1218:	8d 32       	cpi	r24, 0x2D	; 45
    121a:	61 f0       	breq	.+24     	; 0x1234 <vfprintf+0x92>
    121c:	80 33       	cpi	r24, 0x30	; 48
    121e:	69 f4       	brne	.+26     	; 0x123a <vfprintf+0x98>
    1220:	23 2d       	mov	r18, r3
    1222:	21 60       	ori	r18, 0x01	; 1
    1224:	16 c0       	rjmp	.+44     	; 0x1252 <vfprintf+0xb0>
    1226:	83 2d       	mov	r24, r3
    1228:	82 60       	ori	r24, 0x02	; 2
    122a:	38 2e       	mov	r3, r24
    122c:	e3 2d       	mov	r30, r3
    122e:	e4 60       	ori	r30, 0x04	; 4
    1230:	3e 2e       	mov	r3, r30
    1232:	2a c0       	rjmp	.+84     	; 0x1288 <vfprintf+0xe6>
    1234:	f3 2d       	mov	r31, r3
    1236:	f8 60       	ori	r31, 0x08	; 8
    1238:	1d c0       	rjmp	.+58     	; 0x1274 <vfprintf+0xd2>
    123a:	37 fc       	sbrc	r3, 7
    123c:	2d c0       	rjmp	.+90     	; 0x1298 <vfprintf+0xf6>
    123e:	20 ed       	ldi	r18, 0xD0	; 208
    1240:	28 0f       	add	r18, r24
    1242:	2a 30       	cpi	r18, 0x0A	; 10
    1244:	40 f0       	brcs	.+16     	; 0x1256 <vfprintf+0xb4>
    1246:	8e 32       	cpi	r24, 0x2E	; 46
    1248:	b9 f4       	brne	.+46     	; 0x1278 <vfprintf+0xd6>
    124a:	36 fc       	sbrc	r3, 6
    124c:	81 c1       	rjmp	.+770    	; 0x1550 <vfprintf+0x3ae>
    124e:	23 2d       	mov	r18, r3
    1250:	20 64       	ori	r18, 0x40	; 64
    1252:	32 2e       	mov	r3, r18
    1254:	19 c0       	rjmp	.+50     	; 0x1288 <vfprintf+0xe6>
    1256:	36 fe       	sbrs	r3, 6
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <vfprintf+0xc4>
    125a:	8a e0       	ldi	r24, 0x0A	; 10
    125c:	98 9e       	mul	r9, r24
    125e:	20 0d       	add	r18, r0
    1260:	11 24       	eor	r1, r1
    1262:	92 2e       	mov	r9, r18
    1264:	11 c0       	rjmp	.+34     	; 0x1288 <vfprintf+0xe6>
    1266:	ea e0       	ldi	r30, 0x0A	; 10
    1268:	2e 9e       	mul	r2, r30
    126a:	20 0d       	add	r18, r0
    126c:	11 24       	eor	r1, r1
    126e:	22 2e       	mov	r2, r18
    1270:	f3 2d       	mov	r31, r3
    1272:	f0 62       	ori	r31, 0x20	; 32
    1274:	3f 2e       	mov	r3, r31
    1276:	08 c0       	rjmp	.+16     	; 0x1288 <vfprintf+0xe6>
    1278:	8c 36       	cpi	r24, 0x6C	; 108
    127a:	21 f4       	brne	.+8      	; 0x1284 <vfprintf+0xe2>
    127c:	83 2d       	mov	r24, r3
    127e:	80 68       	ori	r24, 0x80	; 128
    1280:	38 2e       	mov	r3, r24
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <vfprintf+0xe6>
    1284:	88 36       	cpi	r24, 0x68	; 104
    1286:	41 f4       	brne	.+16     	; 0x1298 <vfprintf+0xf6>
    1288:	f7 01       	movw	r30, r14
    128a:	93 fd       	sbrc	r25, 3
    128c:	85 91       	lpm	r24, Z+
    128e:	93 ff       	sbrs	r25, 3
    1290:	81 91       	ld	r24, Z+
    1292:	7f 01       	movw	r14, r30
    1294:	81 11       	cpse	r24, r1
    1296:	b3 cf       	rjmp	.-154    	; 0x11fe <vfprintf+0x5c>
    1298:	98 2f       	mov	r25, r24
    129a:	9f 7d       	andi	r25, 0xDF	; 223
    129c:	95 54       	subi	r25, 0x45	; 69
    129e:	93 30       	cpi	r25, 0x03	; 3
    12a0:	28 f4       	brcc	.+10     	; 0x12ac <vfprintf+0x10a>
    12a2:	0c 5f       	subi	r16, 0xFC	; 252
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	9f e3       	ldi	r25, 0x3F	; 63
    12a8:	99 83       	std	Y+1, r25	; 0x01
    12aa:	0d c0       	rjmp	.+26     	; 0x12c6 <vfprintf+0x124>
    12ac:	83 36       	cpi	r24, 0x63	; 99
    12ae:	31 f0       	breq	.+12     	; 0x12bc <vfprintf+0x11a>
    12b0:	83 37       	cpi	r24, 0x73	; 115
    12b2:	71 f0       	breq	.+28     	; 0x12d0 <vfprintf+0x12e>
    12b4:	83 35       	cpi	r24, 0x53	; 83
    12b6:	09 f0       	breq	.+2      	; 0x12ba <vfprintf+0x118>
    12b8:	59 c0       	rjmp	.+178    	; 0x136c <vfprintf+0x1ca>
    12ba:	21 c0       	rjmp	.+66     	; 0x12fe <vfprintf+0x15c>
    12bc:	f8 01       	movw	r30, r16
    12be:	80 81       	ld	r24, Z
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	0e 5f       	subi	r16, 0xFE	; 254
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	88 24       	eor	r8, r8
    12c8:	83 94       	inc	r8
    12ca:	91 2c       	mov	r9, r1
    12cc:	53 01       	movw	r10, r6
    12ce:	13 c0       	rjmp	.+38     	; 0x12f6 <vfprintf+0x154>
    12d0:	28 01       	movw	r4, r16
    12d2:	f2 e0       	ldi	r31, 0x02	; 2
    12d4:	4f 0e       	add	r4, r31
    12d6:	51 1c       	adc	r5, r1
    12d8:	f8 01       	movw	r30, r16
    12da:	a0 80       	ld	r10, Z
    12dc:	b1 80       	ldd	r11, Z+1	; 0x01
    12de:	36 fe       	sbrs	r3, 6
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <vfprintf+0x146>
    12e2:	69 2d       	mov	r22, r9
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <vfprintf+0x14a>
    12e8:	6f ef       	ldi	r22, 0xFF	; 255
    12ea:	7f ef       	ldi	r23, 0xFF	; 255
    12ec:	c5 01       	movw	r24, r10
    12ee:	0e 94 bd 0a 	call	0x157a	; 0x157a <strnlen>
    12f2:	4c 01       	movw	r8, r24
    12f4:	82 01       	movw	r16, r4
    12f6:	f3 2d       	mov	r31, r3
    12f8:	ff 77       	andi	r31, 0x7F	; 127
    12fa:	3f 2e       	mov	r3, r31
    12fc:	16 c0       	rjmp	.+44     	; 0x132a <vfprintf+0x188>
    12fe:	28 01       	movw	r4, r16
    1300:	22 e0       	ldi	r18, 0x02	; 2
    1302:	42 0e       	add	r4, r18
    1304:	51 1c       	adc	r5, r1
    1306:	f8 01       	movw	r30, r16
    1308:	a0 80       	ld	r10, Z
    130a:	b1 80       	ldd	r11, Z+1	; 0x01
    130c:	36 fe       	sbrs	r3, 6
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <vfprintf+0x174>
    1310:	69 2d       	mov	r22, r9
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	02 c0       	rjmp	.+4      	; 0x131a <vfprintf+0x178>
    1316:	6f ef       	ldi	r22, 0xFF	; 255
    1318:	7f ef       	ldi	r23, 0xFF	; 255
    131a:	c5 01       	movw	r24, r10
    131c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <strnlen_P>
    1320:	4c 01       	movw	r8, r24
    1322:	f3 2d       	mov	r31, r3
    1324:	f0 68       	ori	r31, 0x80	; 128
    1326:	3f 2e       	mov	r3, r31
    1328:	82 01       	movw	r16, r4
    132a:	33 fc       	sbrc	r3, 3
    132c:	1b c0       	rjmp	.+54     	; 0x1364 <vfprintf+0x1c2>
    132e:	82 2d       	mov	r24, r2
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	88 16       	cp	r8, r24
    1334:	99 06       	cpc	r9, r25
    1336:	b0 f4       	brcc	.+44     	; 0x1364 <vfprintf+0x1c2>
    1338:	b6 01       	movw	r22, r12
    133a:	80 e2       	ldi	r24, 0x20	; 32
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    1342:	2a 94       	dec	r2
    1344:	f4 cf       	rjmp	.-24     	; 0x132e <vfprintf+0x18c>
    1346:	f5 01       	movw	r30, r10
    1348:	37 fc       	sbrc	r3, 7
    134a:	85 91       	lpm	r24, Z+
    134c:	37 fe       	sbrs	r3, 7
    134e:	81 91       	ld	r24, Z+
    1350:	5f 01       	movw	r10, r30
    1352:	b6 01       	movw	r22, r12
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    135a:	21 10       	cpse	r2, r1
    135c:	2a 94       	dec	r2
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	82 1a       	sub	r8, r18
    1362:	91 08       	sbc	r9, r1
    1364:	81 14       	cp	r8, r1
    1366:	91 04       	cpc	r9, r1
    1368:	71 f7       	brne	.-36     	; 0x1346 <vfprintf+0x1a4>
    136a:	e8 c0       	rjmp	.+464    	; 0x153c <vfprintf+0x39a>
    136c:	84 36       	cpi	r24, 0x64	; 100
    136e:	11 f0       	breq	.+4      	; 0x1374 <vfprintf+0x1d2>
    1370:	89 36       	cpi	r24, 0x69	; 105
    1372:	41 f5       	brne	.+80     	; 0x13c4 <vfprintf+0x222>
    1374:	f8 01       	movw	r30, r16
    1376:	37 fe       	sbrs	r3, 7
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <vfprintf+0x1e6>
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	0c 5f       	subi	r16, 0xFC	; 252
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	08 c0       	rjmp	.+16     	; 0x1398 <vfprintf+0x1f6>
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	07 2e       	mov	r0, r23
    138e:	00 0c       	add	r0, r0
    1390:	88 0b       	sbc	r24, r24
    1392:	99 0b       	sbc	r25, r25
    1394:	0e 5f       	subi	r16, 0xFE	; 254
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	f3 2d       	mov	r31, r3
    139a:	ff 76       	andi	r31, 0x6F	; 111
    139c:	3f 2e       	mov	r3, r31
    139e:	97 ff       	sbrs	r25, 7
    13a0:	09 c0       	rjmp	.+18     	; 0x13b4 <vfprintf+0x212>
    13a2:	90 95       	com	r25
    13a4:	80 95       	com	r24
    13a6:	70 95       	com	r23
    13a8:	61 95       	neg	r22
    13aa:	7f 4f       	sbci	r23, 0xFF	; 255
    13ac:	8f 4f       	sbci	r24, 0xFF	; 255
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	f0 68       	ori	r31, 0x80	; 128
    13b2:	3f 2e       	mov	r3, r31
    13b4:	2a e0       	ldi	r18, 0x0A	; 10
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	a3 01       	movw	r20, r6
    13ba:	0e 94 04 0b 	call	0x1608	; 0x1608 <__ultoa_invert>
    13be:	88 2e       	mov	r8, r24
    13c0:	86 18       	sub	r8, r6
    13c2:	45 c0       	rjmp	.+138    	; 0x144e <vfprintf+0x2ac>
    13c4:	85 37       	cpi	r24, 0x75	; 117
    13c6:	31 f4       	brne	.+12     	; 0x13d4 <vfprintf+0x232>
    13c8:	23 2d       	mov	r18, r3
    13ca:	2f 7e       	andi	r18, 0xEF	; 239
    13cc:	b2 2e       	mov	r11, r18
    13ce:	2a e0       	ldi	r18, 0x0A	; 10
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	25 c0       	rjmp	.+74     	; 0x141e <vfprintf+0x27c>
    13d4:	93 2d       	mov	r25, r3
    13d6:	99 7f       	andi	r25, 0xF9	; 249
    13d8:	b9 2e       	mov	r11, r25
    13da:	8f 36       	cpi	r24, 0x6F	; 111
    13dc:	c1 f0       	breq	.+48     	; 0x140e <vfprintf+0x26c>
    13de:	18 f4       	brcc	.+6      	; 0x13e6 <vfprintf+0x244>
    13e0:	88 35       	cpi	r24, 0x58	; 88
    13e2:	79 f0       	breq	.+30     	; 0x1402 <vfprintf+0x260>
    13e4:	b5 c0       	rjmp	.+362    	; 0x1550 <vfprintf+0x3ae>
    13e6:	80 37       	cpi	r24, 0x70	; 112
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <vfprintf+0x24e>
    13ea:	88 37       	cpi	r24, 0x78	; 120
    13ec:	21 f0       	breq	.+8      	; 0x13f6 <vfprintf+0x254>
    13ee:	b0 c0       	rjmp	.+352    	; 0x1550 <vfprintf+0x3ae>
    13f0:	e9 2f       	mov	r30, r25
    13f2:	e0 61       	ori	r30, 0x10	; 16
    13f4:	be 2e       	mov	r11, r30
    13f6:	b4 fe       	sbrs	r11, 4
    13f8:	0d c0       	rjmp	.+26     	; 0x1414 <vfprintf+0x272>
    13fa:	fb 2d       	mov	r31, r11
    13fc:	f4 60       	ori	r31, 0x04	; 4
    13fe:	bf 2e       	mov	r11, r31
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <vfprintf+0x272>
    1402:	34 fe       	sbrs	r3, 4
    1404:	0a c0       	rjmp	.+20     	; 0x141a <vfprintf+0x278>
    1406:	29 2f       	mov	r18, r25
    1408:	26 60       	ori	r18, 0x06	; 6
    140a:	b2 2e       	mov	r11, r18
    140c:	06 c0       	rjmp	.+12     	; 0x141a <vfprintf+0x278>
    140e:	28 e0       	ldi	r18, 0x08	; 8
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	05 c0       	rjmp	.+10     	; 0x141e <vfprintf+0x27c>
    1414:	20 e1       	ldi	r18, 0x10	; 16
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <vfprintf+0x27c>
    141a:	20 e1       	ldi	r18, 0x10	; 16
    141c:	32 e0       	ldi	r19, 0x02	; 2
    141e:	f8 01       	movw	r30, r16
    1420:	b7 fe       	sbrs	r11, 7
    1422:	07 c0       	rjmp	.+14     	; 0x1432 <vfprintf+0x290>
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	0c 5f       	subi	r16, 0xFC	; 252
    142e:	1f 4f       	sbci	r17, 0xFF	; 255
    1430:	06 c0       	rjmp	.+12     	; 0x143e <vfprintf+0x29c>
    1432:	60 81       	ld	r22, Z
    1434:	71 81       	ldd	r23, Z+1	; 0x01
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 5f       	subi	r16, 0xFE	; 254
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	a3 01       	movw	r20, r6
    1440:	0e 94 04 0b 	call	0x1608	; 0x1608 <__ultoa_invert>
    1444:	88 2e       	mov	r8, r24
    1446:	86 18       	sub	r8, r6
    1448:	fb 2d       	mov	r31, r11
    144a:	ff 77       	andi	r31, 0x7F	; 127
    144c:	3f 2e       	mov	r3, r31
    144e:	36 fe       	sbrs	r3, 6
    1450:	0d c0       	rjmp	.+26     	; 0x146c <vfprintf+0x2ca>
    1452:	23 2d       	mov	r18, r3
    1454:	2e 7f       	andi	r18, 0xFE	; 254
    1456:	a2 2e       	mov	r10, r18
    1458:	89 14       	cp	r8, r9
    145a:	58 f4       	brcc	.+22     	; 0x1472 <vfprintf+0x2d0>
    145c:	34 fe       	sbrs	r3, 4
    145e:	0b c0       	rjmp	.+22     	; 0x1476 <vfprintf+0x2d4>
    1460:	32 fc       	sbrc	r3, 2
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <vfprintf+0x2d4>
    1464:	83 2d       	mov	r24, r3
    1466:	8e 7e       	andi	r24, 0xEE	; 238
    1468:	a8 2e       	mov	r10, r24
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <vfprintf+0x2d4>
    146c:	b8 2c       	mov	r11, r8
    146e:	a3 2c       	mov	r10, r3
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <vfprintf+0x2d6>
    1472:	b8 2c       	mov	r11, r8
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <vfprintf+0x2d6>
    1476:	b9 2c       	mov	r11, r9
    1478:	a4 fe       	sbrs	r10, 4
    147a:	0f c0       	rjmp	.+30     	; 0x149a <vfprintf+0x2f8>
    147c:	fe 01       	movw	r30, r28
    147e:	e8 0d       	add	r30, r8
    1480:	f1 1d       	adc	r31, r1
    1482:	80 81       	ld	r24, Z
    1484:	80 33       	cpi	r24, 0x30	; 48
    1486:	21 f4       	brne	.+8      	; 0x1490 <vfprintf+0x2ee>
    1488:	9a 2d       	mov	r25, r10
    148a:	99 7e       	andi	r25, 0xE9	; 233
    148c:	a9 2e       	mov	r10, r25
    148e:	09 c0       	rjmp	.+18     	; 0x14a2 <vfprintf+0x300>
    1490:	a2 fe       	sbrs	r10, 2
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <vfprintf+0x2fe>
    1494:	b3 94       	inc	r11
    1496:	b3 94       	inc	r11
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <vfprintf+0x300>
    149a:	8a 2d       	mov	r24, r10
    149c:	86 78       	andi	r24, 0x86	; 134
    149e:	09 f0       	breq	.+2      	; 0x14a2 <vfprintf+0x300>
    14a0:	b3 94       	inc	r11
    14a2:	a3 fc       	sbrc	r10, 3
    14a4:	11 c0       	rjmp	.+34     	; 0x14c8 <vfprintf+0x326>
    14a6:	a0 fe       	sbrs	r10, 0
    14a8:	06 c0       	rjmp	.+12     	; 0x14b6 <vfprintf+0x314>
    14aa:	b2 14       	cp	r11, r2
    14ac:	88 f4       	brcc	.+34     	; 0x14d0 <vfprintf+0x32e>
    14ae:	28 0c       	add	r2, r8
    14b0:	92 2c       	mov	r9, r2
    14b2:	9b 18       	sub	r9, r11
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <vfprintf+0x330>
    14b6:	b2 14       	cp	r11, r2
    14b8:	60 f4       	brcc	.+24     	; 0x14d2 <vfprintf+0x330>
    14ba:	b6 01       	movw	r22, r12
    14bc:	80 e2       	ldi	r24, 0x20	; 32
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    14c4:	b3 94       	inc	r11
    14c6:	f7 cf       	rjmp	.-18     	; 0x14b6 <vfprintf+0x314>
    14c8:	b2 14       	cp	r11, r2
    14ca:	18 f4       	brcc	.+6      	; 0x14d2 <vfprintf+0x330>
    14cc:	2b 18       	sub	r2, r11
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <vfprintf+0x332>
    14d0:	98 2c       	mov	r9, r8
    14d2:	21 2c       	mov	r2, r1
    14d4:	a4 fe       	sbrs	r10, 4
    14d6:	10 c0       	rjmp	.+32     	; 0x14f8 <vfprintf+0x356>
    14d8:	b6 01       	movw	r22, r12
    14da:	80 e3       	ldi	r24, 0x30	; 48
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    14e2:	a2 fe       	sbrs	r10, 2
    14e4:	17 c0       	rjmp	.+46     	; 0x1514 <vfprintf+0x372>
    14e6:	a1 fc       	sbrc	r10, 1
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <vfprintf+0x34e>
    14ea:	88 e7       	ldi	r24, 0x78	; 120
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <vfprintf+0x352>
    14f0:	88 e5       	ldi	r24, 0x58	; 88
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	b6 01       	movw	r22, r12
    14f6:	0c c0       	rjmp	.+24     	; 0x1510 <vfprintf+0x36e>
    14f8:	8a 2d       	mov	r24, r10
    14fa:	86 78       	andi	r24, 0x86	; 134
    14fc:	59 f0       	breq	.+22     	; 0x1514 <vfprintf+0x372>
    14fe:	a1 fe       	sbrs	r10, 1
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <vfprintf+0x364>
    1502:	8b e2       	ldi	r24, 0x2B	; 43
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <vfprintf+0x366>
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	a7 fc       	sbrc	r10, 7
    150a:	8d e2       	ldi	r24, 0x2D	; 45
    150c:	b6 01       	movw	r22, r12
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    1514:	89 14       	cp	r8, r9
    1516:	38 f4       	brcc	.+14     	; 0x1526 <vfprintf+0x384>
    1518:	b6 01       	movw	r22, r12
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    1522:	9a 94       	dec	r9
    1524:	f7 cf       	rjmp	.-18     	; 0x1514 <vfprintf+0x372>
    1526:	8a 94       	dec	r8
    1528:	f3 01       	movw	r30, r6
    152a:	e8 0d       	add	r30, r8
    152c:	f1 1d       	adc	r31, r1
    152e:	80 81       	ld	r24, Z
    1530:	b6 01       	movw	r22, r12
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    1538:	81 10       	cpse	r8, r1
    153a:	f5 cf       	rjmp	.-22     	; 0x1526 <vfprintf+0x384>
    153c:	22 20       	and	r2, r2
    153e:	09 f4       	brne	.+2      	; 0x1542 <vfprintf+0x3a0>
    1540:	42 ce       	rjmp	.-892    	; 0x11c6 <vfprintf+0x24>
    1542:	b6 01       	movw	r22, r12
    1544:	80 e2       	ldi	r24, 0x20	; 32
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 c8 0a 	call	0x1590	; 0x1590 <fputc>
    154c:	2a 94       	dec	r2
    154e:	f6 cf       	rjmp	.-20     	; 0x153c <vfprintf+0x39a>
    1550:	f6 01       	movw	r30, r12
    1552:	86 81       	ldd	r24, Z+6	; 0x06
    1554:	97 81       	ldd	r25, Z+7	; 0x07
    1556:	02 c0       	rjmp	.+4      	; 0x155c <vfprintf+0x3ba>
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	9f ef       	ldi	r25, 0xFF	; 255
    155c:	2b 96       	adiw	r28, 0x0b	; 11
    155e:	e2 e1       	ldi	r30, 0x12	; 18
    1560:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__epilogue_restores__>

00001564 <strnlen_P>:
    1564:	fc 01       	movw	r30, r24
    1566:	05 90       	lpm	r0, Z+
    1568:	61 50       	subi	r22, 0x01	; 1
    156a:	70 40       	sbci	r23, 0x00	; 0
    156c:	01 10       	cpse	r0, r1
    156e:	d8 f7       	brcc	.-10     	; 0x1566 <strnlen_P+0x2>
    1570:	80 95       	com	r24
    1572:	90 95       	com	r25
    1574:	8e 0f       	add	r24, r30
    1576:	9f 1f       	adc	r25, r31
    1578:	08 95       	ret

0000157a <strnlen>:
    157a:	fc 01       	movw	r30, r24
    157c:	61 50       	subi	r22, 0x01	; 1
    157e:	70 40       	sbci	r23, 0x00	; 0
    1580:	01 90       	ld	r0, Z+
    1582:	01 10       	cpse	r0, r1
    1584:	d8 f7       	brcc	.-10     	; 0x157c <strnlen+0x2>
    1586:	80 95       	com	r24
    1588:	90 95       	com	r25
    158a:	8e 0f       	add	r24, r30
    158c:	9f 1f       	adc	r25, r31
    158e:	08 95       	ret

00001590 <fputc>:
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	fb 01       	movw	r30, r22
    159a:	23 81       	ldd	r18, Z+3	; 0x03
    159c:	21 fd       	sbrc	r18, 1
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <fputc+0x16>
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	9f ef       	ldi	r25, 0xFF	; 255
    15a4:	2c c0       	rjmp	.+88     	; 0x15fe <fputc+0x6e>
    15a6:	22 ff       	sbrs	r18, 2
    15a8:	16 c0       	rjmp	.+44     	; 0x15d6 <fputc+0x46>
    15aa:	46 81       	ldd	r20, Z+6	; 0x06
    15ac:	57 81       	ldd	r21, Z+7	; 0x07
    15ae:	24 81       	ldd	r18, Z+4	; 0x04
    15b0:	35 81       	ldd	r19, Z+5	; 0x05
    15b2:	42 17       	cp	r20, r18
    15b4:	53 07       	cpc	r21, r19
    15b6:	44 f4       	brge	.+16     	; 0x15c8 <fputc+0x38>
    15b8:	a0 81       	ld	r26, Z
    15ba:	b1 81       	ldd	r27, Z+1	; 0x01
    15bc:	9d 01       	movw	r18, r26
    15be:	2f 5f       	subi	r18, 0xFF	; 255
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	31 83       	std	Z+1, r19	; 0x01
    15c4:	20 83       	st	Z, r18
    15c6:	8c 93       	st	X, r24
    15c8:	26 81       	ldd	r18, Z+6	; 0x06
    15ca:	37 81       	ldd	r19, Z+7	; 0x07
    15cc:	2f 5f       	subi	r18, 0xFF	; 255
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	37 83       	std	Z+7, r19	; 0x07
    15d2:	26 83       	std	Z+6, r18	; 0x06
    15d4:	14 c0       	rjmp	.+40     	; 0x15fe <fputc+0x6e>
    15d6:	8b 01       	movw	r16, r22
    15d8:	ec 01       	movw	r28, r24
    15da:	fb 01       	movw	r30, r22
    15dc:	00 84       	ldd	r0, Z+8	; 0x08
    15de:	f1 85       	ldd	r31, Z+9	; 0x09
    15e0:	e0 2d       	mov	r30, r0
    15e2:	09 95       	icall
    15e4:	89 2b       	or	r24, r25
    15e6:	e1 f6       	brne	.-72     	; 0x15a0 <fputc+0x10>
    15e8:	d8 01       	movw	r26, r16
    15ea:	16 96       	adiw	r26, 0x06	; 6
    15ec:	8d 91       	ld	r24, X+
    15ee:	9c 91       	ld	r25, X
    15f0:	17 97       	sbiw	r26, 0x07	; 7
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	17 96       	adiw	r26, 0x07	; 7
    15f6:	9c 93       	st	X, r25
    15f8:	8e 93       	st	-X, r24
    15fa:	16 97       	sbiw	r26, 0x06	; 6
    15fc:	ce 01       	movw	r24, r28
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	08 95       	ret

00001608 <__ultoa_invert>:
    1608:	fa 01       	movw	r30, r20
    160a:	aa 27       	eor	r26, r26
    160c:	28 30       	cpi	r18, 0x08	; 8
    160e:	51 f1       	breq	.+84     	; 0x1664 <__ultoa_invert+0x5c>
    1610:	20 31       	cpi	r18, 0x10	; 16
    1612:	81 f1       	breq	.+96     	; 0x1674 <__ultoa_invert+0x6c>
    1614:	e8 94       	clt
    1616:	6f 93       	push	r22
    1618:	6e 7f       	andi	r22, 0xFE	; 254
    161a:	6e 5f       	subi	r22, 0xFE	; 254
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	8f 4f       	sbci	r24, 0xFF	; 255
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	af 4f       	sbci	r26, 0xFF	; 255
    1624:	b1 e0       	ldi	r27, 0x01	; 1
    1626:	3e d0       	rcall	.+124    	; 0x16a4 <__ultoa_invert+0x9c>
    1628:	b4 e0       	ldi	r27, 0x04	; 4
    162a:	3c d0       	rcall	.+120    	; 0x16a4 <__ultoa_invert+0x9c>
    162c:	67 0f       	add	r22, r23
    162e:	78 1f       	adc	r23, r24
    1630:	89 1f       	adc	r24, r25
    1632:	9a 1f       	adc	r25, r26
    1634:	a1 1d       	adc	r26, r1
    1636:	68 0f       	add	r22, r24
    1638:	79 1f       	adc	r23, r25
    163a:	8a 1f       	adc	r24, r26
    163c:	91 1d       	adc	r25, r1
    163e:	a1 1d       	adc	r26, r1
    1640:	6a 0f       	add	r22, r26
    1642:	71 1d       	adc	r23, r1
    1644:	81 1d       	adc	r24, r1
    1646:	91 1d       	adc	r25, r1
    1648:	a1 1d       	adc	r26, r1
    164a:	20 d0       	rcall	.+64     	; 0x168c <__ultoa_invert+0x84>
    164c:	09 f4       	brne	.+2      	; 0x1650 <__ultoa_invert+0x48>
    164e:	68 94       	set
    1650:	3f 91       	pop	r19
    1652:	2a e0       	ldi	r18, 0x0A	; 10
    1654:	26 9f       	mul	r18, r22
    1656:	11 24       	eor	r1, r1
    1658:	30 19       	sub	r19, r0
    165a:	30 5d       	subi	r19, 0xD0	; 208
    165c:	31 93       	st	Z+, r19
    165e:	de f6       	brtc	.-74     	; 0x1616 <__ultoa_invert+0xe>
    1660:	cf 01       	movw	r24, r30
    1662:	08 95       	ret
    1664:	46 2f       	mov	r20, r22
    1666:	47 70       	andi	r20, 0x07	; 7
    1668:	40 5d       	subi	r20, 0xD0	; 208
    166a:	41 93       	st	Z+, r20
    166c:	b3 e0       	ldi	r27, 0x03	; 3
    166e:	0f d0       	rcall	.+30     	; 0x168e <__ultoa_invert+0x86>
    1670:	c9 f7       	brne	.-14     	; 0x1664 <__ultoa_invert+0x5c>
    1672:	f6 cf       	rjmp	.-20     	; 0x1660 <__ultoa_invert+0x58>
    1674:	46 2f       	mov	r20, r22
    1676:	4f 70       	andi	r20, 0x0F	; 15
    1678:	40 5d       	subi	r20, 0xD0	; 208
    167a:	4a 33       	cpi	r20, 0x3A	; 58
    167c:	18 f0       	brcs	.+6      	; 0x1684 <__ultoa_invert+0x7c>
    167e:	49 5d       	subi	r20, 0xD9	; 217
    1680:	31 fd       	sbrc	r19, 1
    1682:	40 52       	subi	r20, 0x20	; 32
    1684:	41 93       	st	Z+, r20
    1686:	02 d0       	rcall	.+4      	; 0x168c <__ultoa_invert+0x84>
    1688:	a9 f7       	brne	.-22     	; 0x1674 <__ultoa_invert+0x6c>
    168a:	ea cf       	rjmp	.-44     	; 0x1660 <__ultoa_invert+0x58>
    168c:	b4 e0       	ldi	r27, 0x04	; 4
    168e:	a6 95       	lsr	r26
    1690:	97 95       	ror	r25
    1692:	87 95       	ror	r24
    1694:	77 95       	ror	r23
    1696:	67 95       	ror	r22
    1698:	ba 95       	dec	r27
    169a:	c9 f7       	brne	.-14     	; 0x168e <__ultoa_invert+0x86>
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	61 05       	cpc	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	08 95       	ret
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	0a 2e       	mov	r0, r26
    16aa:	06 94       	lsr	r0
    16ac:	57 95       	ror	r21
    16ae:	47 95       	ror	r20
    16b0:	37 95       	ror	r19
    16b2:	27 95       	ror	r18
    16b4:	ba 95       	dec	r27
    16b6:	c9 f7       	brne	.-14     	; 0x16aa <__ultoa_invert+0xa2>
    16b8:	62 0f       	add	r22, r18
    16ba:	73 1f       	adc	r23, r19
    16bc:	84 1f       	adc	r24, r20
    16be:	95 1f       	adc	r25, r21
    16c0:	a0 1d       	adc	r26, r0
    16c2:	08 95       	ret

000016c4 <__prologue_saves__>:
    16c4:	2f 92       	push	r2
    16c6:	3f 92       	push	r3
    16c8:	4f 92       	push	r4
    16ca:	5f 92       	push	r5
    16cc:	6f 92       	push	r6
    16ce:	7f 92       	push	r7
    16d0:	8f 92       	push	r8
    16d2:	9f 92       	push	r9
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	ca 1b       	sub	r28, r26
    16ee:	db 0b       	sbc	r29, r27
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	09 94       	ijmp

000016fc <__epilogue_restores__>:
    16fc:	2a 88       	ldd	r2, Y+18	; 0x12
    16fe:	39 88       	ldd	r3, Y+17	; 0x11
    1700:	48 88       	ldd	r4, Y+16	; 0x10
    1702:	5f 84       	ldd	r5, Y+15	; 0x0f
    1704:	6e 84       	ldd	r6, Y+14	; 0x0e
    1706:	7d 84       	ldd	r7, Y+13	; 0x0d
    1708:	8c 84       	ldd	r8, Y+12	; 0x0c
    170a:	9b 84       	ldd	r9, Y+11	; 0x0b
    170c:	aa 84       	ldd	r10, Y+10	; 0x0a
    170e:	b9 84       	ldd	r11, Y+9	; 0x09
    1710:	c8 84       	ldd	r12, Y+8	; 0x08
    1712:	df 80       	ldd	r13, Y+7	; 0x07
    1714:	ee 80       	ldd	r14, Y+6	; 0x06
    1716:	fd 80       	ldd	r15, Y+5	; 0x05
    1718:	0c 81       	ldd	r16, Y+4	; 0x04
    171a:	1b 81       	ldd	r17, Y+3	; 0x03
    171c:	aa 81       	ldd	r26, Y+2	; 0x02
    171e:	b9 81       	ldd	r27, Y+1	; 0x01
    1720:	ce 0f       	add	r28, r30
    1722:	d1 1d       	adc	r29, r1
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	ed 01       	movw	r28, r26
    1730:	08 95       	ret

00001732 <_exit>:
    1732:	f8 94       	cli

00001734 <__stop_program>:
    1734:	ff cf       	rjmp	.-2      	; 0x1734 <__stop_program>
